// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OptionsOption is an auto generated low-level Go binding around an user-defined struct.
type OptionsOption struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}

// InstrumentsMetaData contains all meta data concerning the Instruments contract.
var InstrumentsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AboveMaxSettlementFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeSettlementFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthority\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Settled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"TransferFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accounts\",\"type\":\"address\"}],\"name\":\"AccountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputePeriod\",\"type\":\"uint256\"}],\"name\":\"DisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"VersionInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structOptions.Option\",\"name\":\"option\",\"type\":\"tuple\"}],\"name\":\"addOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disputePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instrumentAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instrumentAccountsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"}],\"name\":\"instrumentAccountsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instruments\",\"outputs\":[{\"internalType\":\"enumInstrumentsInterface.InstrumentType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"isDisputePeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numSettledAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accounts\",\"type\":\"address\"}],\"name\":\"setAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_disputePeriod\",\"type\":\"uint256\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryPrice\",\"type\":\"uint256\"}],\"name\":\"setExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settledInstrumentAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"}],\"name\":\"totalOptionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferInstrument\",\"outputs\":[{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051613c6461004c600039600081816109ac01528181610a6101528181610c0e01528181610cbe0152610e070152613c646000f3fe6080604052600436106101fe5760003560e01c80635af9ac0a1161011d5780639d5bb5c0116100b0578063cf7198ac1161007f578063dee52b6411610064578063dee52b641461079f578063e6a97e44146107f3578063ee5314091461081357600080fd5b8063cf7198ac14610752578063d30578771461077f57600080fd5b80639d5bb5c0146106b5578063c1ece4dd146106d5578063c4d66de814610702578063c7f9df8b1461072257600080fd5b806388e53ec8116100ec57806388e53ec81461060b5780638b3cddaf146106385780638da5cb5b1461065857806391223d691461068557600080fd5b80635af9ac0a1461057e5780635fdc71491461059e57806368cd03f6146105be5780636cd22eaf146105eb57600080fd5b80632834578011610195578063432a4e7d11610164578063432a4e7d14610509578063484fd4e1146105295780634f1ef2861461055657806352d1902d1461056957600080fd5b806328345780146103e35780633659cfe6146104135780633bbd64bc14610433578063409e22051461046357600080fd5b806313af4035116101d157806313af4035146103005780631648bb431461032057806319b57f9b1461036b57806322bbad0b146103a657600080fd5b8063059f6b071461020357806306fdde031461024357806308274382146102995780630c6caff8146102bb575b600080fd5b34801561020f57600080fd5b5061023061021e366004613409565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561024f57600080fd5b5061028c6040518060400160405280600b81526020017f496e737472756d656e747300000000000000000000000000000000000000000081525081565b60405161023a9190613452565b3480156102a557600080fd5b506102b96102b4366004613409565b610833565b005b3480156102c757600080fd5b506102db6102d63660046134a3565b6108f3565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161023a565b34801561030c57600080fd5b506102b961031b366004613409565b610938565b34801561032c57600080fd5b5061035b61033b3660046134a3565b600f60209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161023a565b34801561037757600080fd5b5061035b6103863660046134c5565b600a60209081526000928352604080842090915290825290205460ff1681565b3480156103b257600080fd5b506103d66103c13660046134f5565b60076020526000908152604090205460ff1681565b60405161023a919061353d565b3480156103ef57600080fd5b5061035b6103fe3660046134f5565b600c6020526000908152604090205460ff1681565b34801561041f57600080fd5b506102b961042e366004613409565b610995565b34801561043f57600080fd5b5061035b61044e366004613409565b60046020526000908152604090205460ff1681565b34801561046f57600080fd5b506104d261047e3660046134f5565b60106020526000908152604090208054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff8216927401000000000000000000000000000000000000000090920460ff16919084565b6040805173ffffffffffffffffffffffffffffffffffffffff9095168552921515602085015291830152606082015260800161023a565b34801561051557600080fd5b506102b9610524366004613557565b610b9c565b34801561053557600080fd5b506102306105443660046134f5565b600e6020526000908152604090205481565b6102b96105643660046135b8565b610bf7565b34801561057557600080fd5b50610230610ded565b34801561058a57600080fd5b506102306105993660046134f5565b610ed9565b3480156105aa57600080fd5b5061035b6105b936600461369a565b6110c2565b3480156105ca57600080fd5b506005546102db9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105f757600080fd5b506102b96106063660046136d4565b61115c565b34801561061757600080fd5b506102306106263660046134f5565b60086020526000908152604090205481565b34801561064457600080fd5b506102b961065336600461369a565b611279565b34801561066457600080fd5b506000546102db9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561069157600080fd5b5061035b6106a0366004613409565b60036020526000908152604090205460ff1681565b3480156106c157600080fd5b506102b96106d03660046134a3565b61131e565b3480156106e157600080fd5b506102306106f03660046134f5565b60009081526009602052604090205490565b34801561070e57600080fd5b506102b961071d366004613409565b611382565b34801561072e57600080fd5b5061035b61073d3660046134f5565b600d6020526000908152604090205460ff1681565b34801561075e57600080fd5b5061077261076d366004613702565b611413565b60405161023a919061375c565b34801561078b57600080fd5b506102b961079a3660046136d4565b6119a4565b3480156107ab57600080fd5b506107de6107ba36600461369a565b600b6020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161023a565b3480156107ff57600080fd5b506102b961080e36600461376a565b611ac1565b34801561081f57600080fd5b506102b961082e3660046137c0565b611c4d565b60005473ffffffffffffffffffffffffffffffffffffffff163314610884576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d90600090a250565b6009602052816000526040600020818154811061090f57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169150829050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610989576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61099281611dc6565b50565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610a5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610ad47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610b77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a56565b610b8081611e33565b6040805160008082526020820190925261099291839190611e84565b3360009081526004602052604090205460ff16610be5576040517ff512b27800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bf184848484612083565b50505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610cbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610a56565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d317f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610dd4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a56565b610ddd82611e33565b610de982826001611e84565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610eb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a56565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000600160008381526007602052604090205460ff166001811115610f0057610f0061350e565b14610f37576040517ff8ee914200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152601060209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900460ff1615159281019290925260018101549282019290925260029091015460608201819052421015610fb95750600092915050565b60008381526010602090815260408083205473ffffffffffffffffffffffffffffffffffffffff168352600b82528083206060850151845290915281205490819003611009575060009392505050565b6000848152600860209081526040918290205460055483517f3fd1e2bd00000000000000000000000000000000000000000000000000000000815293516110ba949293869373ffffffffffffffffffffffffffffffffffffffff90931692633fd1e2bd92600480830193928290030181865afa15801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b191906137f5565b85929190612c4b565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b60209081526040808320848452825280832081518083019092528054825260010154918101829052908203611119576000915050611156565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260066020908152604090912054908201516111509190613847565b42119150505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111ad576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166111fa576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112ca576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600081815260066020526040808220849055518392917f6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a791a35050565b3360009081526004602052604090205460ff16611367576040517ff512b27800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260096020526040812054610de991849184612083565b600161138e818061385f565b600154146113c8576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001036113d65760016002555b6113df82611dc6565b600181905560405181907f7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d90600090a25050565b3360009081526003602052604081205460ff1661145c576040517f3121268600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254600114611498576040517fab143c0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280556005546040517f49ad755b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018690529091169060009082906349ad755b90604401602060405180830381865afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c9190613876565b6040517f49ad755b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018890529192506000918416906349ad755b90604401602060405180830381865afa1580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d99190613876565b905060008082136115eb5760006115ed565b815b600084136115fc5760006115fe565b835b6116089190613847565b6040517f1dcc7d5c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018a905260448201899052919250600091861690631dcc7d5c9060640160408051808303816000875af1158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad919061389e565b91506000905081600b8111156116c5576116c561350e565b146116df576116d381612c7e565b95505050505050611997565b6116e9888b612cef565b6040517f7df5b70100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905260448201899052861690637df5b7019060640160408051808303816000875af1158015611764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611788919061389e565b91506000905081600b8111156117a0576117a061350e565b146117ae576116d381612c7e565b6117b8888a612cef565b6040517f49ad755b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018a9052600091908716906349ad755b90604401602060405180830381865afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190613876565b6040517f49ad755b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018c90529192506000918816906349ad755b90604401602060405180830381865afa1580156118cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f09190613876565b90506000808213611902576000611904565b815b60008413611913576000611915565b835b61191f9190613847565b90508481101561195c57611933818661385f565b60008c8152600860205260408120805490919061195190849061385f565b9091555061198a9050565b611966858261385f565b60008c81526008602052604081208054909190611984908490613847565b90915550505b6000985050505050505050505b6001600255949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146119f5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611a42576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c0091a35050565b3360009081526004602052604090205460ff16611b0a576040517ff512b27800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526007602052604081205460ff166001811115611b2d57611b2d61350e565b14611b64576040517f6f1c629d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260076020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055601090915290208190611bb182826138ca565b50506005546040517f8e9916060000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690638e991606906024016020604051808303816000875af1158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c489190613985565b505050565b3360009081526004602052604090205460ff16611c96576040517ff512b27800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ca083836110c2565b15611cd7576040517f1e3b157700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42821115611d11576040517fd0404f8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600b60209081526040808320858452825291829020825180840184528154815260019091015481830190815283518085019094528484525190929182019015611d7a578260200151611d7c565b425b905273ffffffffffffffffffffffffffffffffffffffff9094166000908152600b602090815260408083209583529481529390208451815593909201516001909301929092555050565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b91a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610992576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611eb757611c4883612dc5565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611f3c575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611f3991810190613876565b60015b611fc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610a56565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610a56565b50611c48838383612ecf565b61208f6006600a613ac0565b61209a906064613acc565b8111156120d3576040517fc452769200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008581526007602052604090205460ff1660018111156120f8576120f861350e565b1461212f576040517ff8ee914200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600c602052604090205460ff1615612178576040517f97088ec300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600d602052604090205460ff166121c6576000848152600d6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6000848152601060209081526040918290208251608081018452815473ffffffffffffffffffffffffffffffffffffffff81168083527401000000000000000000000000000000000000000090910460ff16151593820193909352600182015493810193909352600201546060830181905261224291906110c2565b612278576040517f1e3b157700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42816060015111156122b6576040517fd0404f8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152600860205260408120549081900361230b5750506000848152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610bf1565b600061231687610ed9565b90508060000361235f575050506000848152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610bf1565b60008781526009602090815260408083205460055482517f999b93af000000000000000000000000000000000000000000000000000000008152925191949373ffffffffffffffffffffffffffffffffffffffff9091169263999b93af92600480830193928290030181865afa1580156123dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124019190613b09565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663158626f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124969190613b09565b9050885b888110156129115760008b81526009602052604081208054839081106124c2576124c2613b26565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166349ad755b838f6040518363ffffffff1660e01b815260040161256f92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa15801561258c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b09190613876565b60008e8152600f6020908152604080832087845290915290205490915060ff166126665760008d8152600e602052604081208054600192906125f3908490613847565b909155505060008d8152600f60209081526040808320868452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905573ffffffffffffffffffffffffffffffffffffffff808516908316036126615750506128ff565b61266d565b50506128ff565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639aeddeff838f6040518363ffffffff1660e01b81526004016126eb92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020604051808303816000875af115801561270a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272e9190613985565b506000811315612831576000886127458984613acc565b61274f9190613b55565b9050600061275f8f838e8a612ef4565b60055490915073ffffffffffffffffffffffffffffffffffffffff16637de182c5858961278c858761385f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152929091166024830152604482015260640160408051808303816000875af1158015612804573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612828919061389e565b505050506128fc565b6000888861283e84613b90565b6128489190613acc565b6128529190613b55565b6005546040517f262709e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015289811660248301526044820184905292935091169063262709e69060640160408051808303816000875af11580156128d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f8919061389e565b5050505b50505b8061290981613bc8565b91505061249a565b5060008a8152600e6020526040902054839003612c3f576005546040517f49ad755b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018d905260009216906349ad755b90604401602060405180830381865afa1580156129a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c49190613876565b6005546040517f9aeddeff00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018f9052929350911690639aeddeff906044016020604051808303816000875af1158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a639190613985565b506000811315612b3257600086612a7a8784613acc565b612a849190613b55565b6005546040517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152878116602483015260448201849052929350911690637de182c59060640160408051808303816000875af1158015612b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2a919061389e565b505050612c06565b6000811215612c065760008686612b4884613b90565b612b529190613acc565b612b5c9190613b55565b6005546040517f262709e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015287811660248301526044820184905292935091169063262709e69060640160408051808303816000875af1158015612bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c02919061389e565b5050505b5060008a8152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50505050505050505050565b6000846020015115612c6e57612c6785604001518486856130c9565b90506110ba565b612c678560400151848685613172565b60008082600b811115612c9357612c9361350e565b03612ca057506000919050565b600582600b811115612cb457612cb461350e565b03612cc157506002919050565b600282600b811115612cd557612cd561350e565b03612ce257506003919050565b506001919050565b919050565b6000828152600a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610de95760008281526009602090815260408083208054600180820183559185528385200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff969096169586179055948352600a82528083209383529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b73ffffffffffffffffffffffffffffffffffffffff81163b612e69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610a56565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612ed8836131f3565b600082511180612ee55750805b15611c4857610bf18383613240565b600080612f036006600a613ac0565b612f0e906064613acc565b612f188587613acc565b612f229190613b55565b905080156130c057600554604080517f4614be9f000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637de182c5918391634614be9f9160048083019260209291908290030181865afa158015612fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc69190613b09565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff918216600482015290871660248201526044810185905260640160408051808303816000875af115801561303f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613063919061389e565b91506000905081600b81111561307b5761307b61350e565b146130be578661308a82612c7e565b6040517fc27d2711000000000000000000000000000000000000000000000000000000008152600401610a56929190613c00565b505b95945050505050565b60008484106130da575060006110ba565b6130e5600680613847565b8260ff1610156131315760ff82166130fe600680613847565b613108919061385f565b61311390600a613ac0565b61311d858761385f565b6131279085613acc565b612c679190613b55565b61313c600680613847565b6131499060ff841661385f565b61315490600a613ac0565b61315e858761385f565b6131689085613acc565b612c679190613acc565b6000848411613183575060006110ba565b61318e600680613847565b8260ff1610156131c65760ff82166131a7600680613847565b6131b1919061385f565b6131bc90600a613ac0565b61311d868661385f565b6131d1600680613847565b6131de9060ff841661385f565b6131e990600a613ac0565b61315e868661385f565b6131fc81612dc5565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606132658383604051806060016040528060278152602001613c316027913961326c565b9392505050565b606073ffffffffffffffffffffffffffffffffffffffff84163b613312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610a56565b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161333a9190613c14565b600060405180830381855af49150503d8060008114613375576040519150601f19603f3d011682016040523d82523d6000602084013e61337a565b606091505b509150915061338a828286613394565b9695505050505050565b606083156133a3575081613265565b8251156133b35782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a569190613452565b73ffffffffffffffffffffffffffffffffffffffff8116811461099257600080fd5b60006020828403121561341b57600080fd5b8135613265816133e7565b60005b83811015613441578181015183820152602001613429565b83811115610bf15750506000910152565b6020815260008251806020840152613471816040850160208701613426565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600080604083850312156134b657600080fd5b50508035926020909101359150565b600080604083850312156134d857600080fd5b8235915060208301356134ea816133e7565b809150509250929050565b60006020828403121561350757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600283106135515761355161350e565b91905290565b6000806000806080858703121561356d57600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156135cb57600080fd5b82356135d6816133e7565b9150602083013567ffffffffffffffff808211156135f357600080fd5b818501915085601f83011261360757600080fd5b81358181111561361957613619613589565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561365f5761365f613589565b8160405282815288602084870101111561367857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156136ad57600080fd5b82356136b8816133e7565b946020939093013593505050565b801515811461099257600080fd5b600080604083850312156136e757600080fd5b82356136f2816133e7565b915060208301356134ea816136c6565b6000806000806080858703121561371857600080fd5b8435613723816133e7565b93506020850135613733816133e7565b93969395505050506040820135916060013590565b600681106137585761375861350e565b9052565b602081016111568284613748565b60008082840360a081121561377e57600080fd5b8335925060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820112156137b257600080fd5b506020830190509250929050565b6000806000606084860312156137d557600080fd5b83356137e0816133e7565b95602085013595506040909401359392505050565b60006020828403121561380757600080fd5b815160ff8116811461326557600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561385a5761385a613818565b500190565b60008282101561387157613871613818565b500390565b60006020828403121561388857600080fd5b5051919050565b8051600c8110612cea57600080fd5b600080604083850312156138b157600080fd5b825191506138c16020840161388f565b90509250929050565b81356138d5816133e7565b73ffffffffffffffffffffffffffffffffffffffff811690508154817fffffffffffffffffffffffff000000000000000000000000000000000000000082161783556020840135613925816136c6565b74ff000000000000000000000000000000000000000081151560a01b16837fffffffffffffffffffffff00000000000000000000000000000000000000000084161717845550505060408201356001820155606082013560028201555050565b60006020828403121561399757600080fd5b6132658261388f565b600181815b808511156139f957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156139df576139df613818565b808516156139ec57918102915b93841c93908002906139a5565b509250929050565b600082613a1057506001611156565b81613a1d57506000611156565b8160018114613a335760028114613a3d57613a59565b6001915050611156565b60ff841115613a4e57613a4e613818565b50506001821b611156565b5060208310610133831016604e8410600b8410161715613a7c575081810a611156565b613a8683836139a0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613ab857613ab8613818565b029392505050565b60006132658383613a01565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b0457613b04613818565b500290565b600060208284031215613b1b57600080fd5b8151613265816133e7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082613b8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007f80000000000000000000000000000000000000000000000000000000000000008203613bc157613bc1613818565b5060000390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bf957613bf9613818565b5060010190565b828152604081016132656020830184613748565b60008251613c26818460208701613426565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080f000a",
}

// InstrumentsABI is the input ABI used to generate the binding from.
// Deprecated: Use InstrumentsMetaData.ABI instead.
var InstrumentsABI = InstrumentsMetaData.ABI

// InstrumentsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InstrumentsMetaData.Bin instead.
var InstrumentsBin = InstrumentsMetaData.Bin

// DeployInstruments deploys a new Ethereum contract, binding an instance of Instruments to it.
func DeployInstruments(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Instruments, error) {
	parsed, err := InstrumentsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InstrumentsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Instruments{InstrumentsCaller: InstrumentsCaller{contract: contract}, InstrumentsTransactor: InstrumentsTransactor{contract: contract}, InstrumentsFilterer: InstrumentsFilterer{contract: contract}}, nil
}

// Instruments is an auto generated Go binding around an Ethereum contract.
type Instruments struct {
	InstrumentsCaller     // Read-only binding to the contract
	InstrumentsTransactor // Write-only binding to the contract
	InstrumentsFilterer   // Log filterer for contract events
}

// InstrumentsCaller is an auto generated read-only Go binding around an Ethereum contract.
type InstrumentsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InstrumentsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InstrumentsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InstrumentsSession struct {
	Contract     *Instruments      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InstrumentsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InstrumentsCallerSession struct {
	Contract *InstrumentsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// InstrumentsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InstrumentsTransactorSession struct {
	Contract     *InstrumentsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// InstrumentsRaw is an auto generated low-level Go binding around an Ethereum contract.
type InstrumentsRaw struct {
	Contract *Instruments // Generic contract binding to access the raw methods on
}

// InstrumentsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InstrumentsCallerRaw struct {
	Contract *InstrumentsCaller // Generic read-only contract binding to access the raw methods on
}

// InstrumentsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InstrumentsTransactorRaw struct {
	Contract *InstrumentsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInstruments creates a new instance of Instruments, bound to a specific deployed contract.
func NewInstruments(address common.Address, backend bind.ContractBackend) (*Instruments, error) {
	contract, err := bindInstruments(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Instruments{InstrumentsCaller: InstrumentsCaller{contract: contract}, InstrumentsTransactor: InstrumentsTransactor{contract: contract}, InstrumentsFilterer: InstrumentsFilterer{contract: contract}}, nil
}

// NewInstrumentsCaller creates a new read-only instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsCaller(address common.Address, caller bind.ContractCaller) (*InstrumentsCaller, error) {
	contract, err := bindInstruments(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InstrumentsCaller{contract: contract}, nil
}

// NewInstrumentsTransactor creates a new write-only instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsTransactor(address common.Address, transactor bind.ContractTransactor) (*InstrumentsTransactor, error) {
	contract, err := bindInstruments(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InstrumentsTransactor{contract: contract}, nil
}

// NewInstrumentsFilterer creates a new log filterer instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsFilterer(address common.Address, filterer bind.ContractFilterer) (*InstrumentsFilterer, error) {
	contract, err := bindInstruments(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InstrumentsFilterer{contract: contract}, nil
}

// bindInstruments binds a generic wrapper to an already deployed contract.
func bindInstruments(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InstrumentsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Instruments *InstrumentsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Instruments.Contract.InstrumentsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Instruments *InstrumentsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Instruments.Contract.InstrumentsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Instruments *InstrumentsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Instruments.Contract.InstrumentsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Instruments *InstrumentsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Instruments.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Instruments *InstrumentsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Instruments.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Instruments *InstrumentsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Instruments.Contract.contract.Transact(opts, method, params...)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsCaller) Accounts(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "accounts")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsSession) Accounts() (common.Address, error) {
	return _Instruments.Contract.Accounts(&_Instruments.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsCallerSession) Accounts() (common.Address, error) {
	return _Instruments.Contract.Accounts(&_Instruments.CallOpts)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsCaller) Authorities(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "authorities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsSession) Authorities(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Authorities(&_Instruments.CallOpts, arg0)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Authorities(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Authorities(&_Instruments.CallOpts, arg0)
}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsCaller) DisputePeriod(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "disputePeriod", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsSession) DisputePeriod(arg0 common.Address) (*big.Int, error) {
	return _Instruments.Contract.DisputePeriod(&_Instruments.CallOpts, arg0)
}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) DisputePeriod(arg0 common.Address) (*big.Int, error) {
	return _Instruments.Contract.DisputePeriod(&_Instruments.CallOpts, arg0)
}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsCaller) ExpiryPrice(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "expiryPrice", arg0, arg1)

	outstruct := new(struct {
		Price     *big.Int
		Timestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Price = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsSession) ExpiryPrice(arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	return _Instruments.Contract.ExpiryPrice(&_Instruments.CallOpts, arg0, arg1)
}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsCallerSession) ExpiryPrice(arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	return _Instruments.Contract.ExpiryPrice(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCaller) InstrumentAccounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccounts", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsSession) InstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.InstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) InstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.InstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccountsArray is a free data retrieval call binding the contract method 0x0c6caff8.
//
// Solidity: function instrumentAccountsArray(uint256 , uint256 ) view returns(address)
func (_Instruments *InstrumentsCaller) InstrumentAccountsArray(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccountsArray", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InstrumentAccountsArray is a free data retrieval call binding the contract method 0x0c6caff8.
//
// Solidity: function instrumentAccountsArray(uint256 , uint256 ) view returns(address)
func (_Instruments *InstrumentsSession) InstrumentAccountsArray(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Instruments.Contract.InstrumentAccountsArray(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccountsArray is a free data retrieval call binding the contract method 0x0c6caff8.
//
// Solidity: function instrumentAccountsArray(uint256 , uint256 ) view returns(address)
func (_Instruments *InstrumentsCallerSession) InstrumentAccountsArray(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Instruments.Contract.InstrumentAccountsArray(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccountsSize is a free data retrieval call binding the contract method 0xc1ece4dd.
//
// Solidity: function instrumentAccountsSize(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCaller) InstrumentAccountsSize(opts *bind.CallOpts, instrumentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccountsSize", instrumentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InstrumentAccountsSize is a free data retrieval call binding the contract method 0xc1ece4dd.
//
// Solidity: function instrumentAccountsSize(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsSession) InstrumentAccountsSize(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.InstrumentAccountsSize(&_Instruments.CallOpts, instrumentId)
}

// InstrumentAccountsSize is a free data retrieval call binding the contract method 0xc1ece4dd.
//
// Solidity: function instrumentAccountsSize(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) InstrumentAccountsSize(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.InstrumentAccountsSize(&_Instruments.CallOpts, instrumentId)
}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsCaller) Instruments(opts *bind.CallOpts, arg0 *big.Int) (uint8, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instruments", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsSession) Instruments(arg0 *big.Int) (uint8, error) {
	return _Instruments.Contract.Instruments(&_Instruments.CallOpts, arg0)
}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsCallerSession) Instruments(arg0 *big.Int) (uint8, error) {
	return _Instruments.Contract.Instruments(&_Instruments.CallOpts, arg0)
}

// IsDisputePeriodOver is a free data retrieval call binding the contract method 0x5fdc7149.
//
// Solidity: function isDisputePeriodOver(address _asset, uint256 _expiry) view returns(bool)
func (_Instruments *InstrumentsCaller) IsDisputePeriodOver(opts *bind.CallOpts, _asset common.Address, _expiry *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "isDisputePeriodOver", _asset, _expiry)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDisputePeriodOver is a free data retrieval call binding the contract method 0x5fdc7149.
//
// Solidity: function isDisputePeriodOver(address _asset, uint256 _expiry) view returns(bool)
func (_Instruments *InstrumentsSession) IsDisputePeriodOver(_asset common.Address, _expiry *big.Int) (bool, error) {
	return _Instruments.Contract.IsDisputePeriodOver(&_Instruments.CallOpts, _asset, _expiry)
}

// IsDisputePeriodOver is a free data retrieval call binding the contract method 0x5fdc7149.
//
// Solidity: function isDisputePeriodOver(address _asset, uint256 _expiry) view returns(bool)
func (_Instruments *InstrumentsCallerSession) IsDisputePeriodOver(_asset common.Address, _expiry *big.Int) (bool, error) {
	return _Instruments.Contract.IsDisputePeriodOver(&_Instruments.CallOpts, _asset, _expiry)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsCaller) Keepers(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "keepers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsSession) Keepers(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Keepers(&_Instruments.CallOpts, arg0)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Keepers(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Keepers(&_Instruments.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsSession) Name() (string, error) {
	return _Instruments.Contract.Name(&_Instruments.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsCallerSession) Name() (string, error) {
	return _Instruments.Contract.Name(&_Instruments.CallOpts)
}

// NumSettledAccounts is a free data retrieval call binding the contract method 0x484fd4e1.
//
// Solidity: function numSettledAccounts(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCaller) NumSettledAccounts(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "numSettledAccounts", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumSettledAccounts is a free data retrieval call binding the contract method 0x484fd4e1.
//
// Solidity: function numSettledAccounts(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsSession) NumSettledAccounts(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.NumSettledAccounts(&_Instruments.CallOpts, arg0)
}

// NumSettledAccounts is a free data retrieval call binding the contract method 0x484fd4e1.
//
// Solidity: function numSettledAccounts(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) NumSettledAccounts(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.NumSettledAccounts(&_Instruments.CallOpts, arg0)
}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCaller) OpenInterest(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "openInterest", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsSession) OpenInterest(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.OpenInterest(&_Instruments.CallOpts, arg0)
}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) OpenInterest(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.OpenInterest(&_Instruments.CallOpts, arg0)
}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsCaller) Options(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "options", arg0)

	outstruct := new(struct {
		Asset  common.Address
		IsPut  bool
		Strike *big.Int
		Expiry *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Asset = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.IsPut = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.Strike = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Expiry = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsSession) Options(arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	return _Instruments.Contract.Options(&_Instruments.CallOpts, arg0)
}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsCallerSession) Options(arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	return _Instruments.Contract.Options(&_Instruments.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsSession) Owner() (common.Address, error) {
	return _Instruments.Contract.Owner(&_Instruments.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsCallerSession) Owner() (common.Address, error) {
	return _Instruments.Contract.Owner(&_Instruments.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsSession) ProxiableUUID() ([32]byte, error) {
	return _Instruments.Contract.ProxiableUUID(&_Instruments.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Instruments.Contract.ProxiableUUID(&_Instruments.CallOpts)
}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) Settled(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) Settled(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settled(&_Instruments.CallOpts, arg0)
}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Settled(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settled(&_Instruments.CallOpts, arg0)
}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0x1648bb43.
//
// Solidity: function settledInstrumentAccounts(uint256 , uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) SettledInstrumentAccounts(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settledInstrumentAccounts", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0x1648bb43.
//
// Solidity: function settledInstrumentAccounts(uint256 , uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) SettledInstrumentAccounts(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Instruments.Contract.SettledInstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0x1648bb43.
//
// Solidity: function settledInstrumentAccounts(uint256 , uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) SettledInstrumentAccounts(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Instruments.Contract.SettledInstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) Settling(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settling", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) Settling(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settling(&_Instruments.CallOpts, arg0)
}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Settling(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settling(&_Instruments.CallOpts, arg0)
}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCaller) TotalOptionPayout(opts *bind.CallOpts, instrumentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "totalOptionPayout", instrumentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsSession) TotalOptionPayout(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.TotalOptionPayout(&_Instruments.CallOpts, instrumentId)
}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) TotalOptionPayout(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.TotalOptionPayout(&_Instruments.CallOpts, instrumentId)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsTransactor) AddOption(opts *bind.TransactOpts, instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "addOption", instrument, option)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsSession) AddOption(instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.Contract.AddOption(&_Instruments.TransactOpts, instrument, option)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsTransactorSession) AddOption(instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.Contract.AddOption(&_Instruments.TransactOpts, instrument, option)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "initialize", _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.Initialize(&_Instruments.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsTransactorSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.Initialize(&_Instruments.TransactOpts, _owner)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsTransactor) SetAccounts(opts *bind.TransactOpts, _accounts common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setAccounts", _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetAccounts(&_Instruments.TransactOpts, _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsTransactorSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetAccounts(&_Instruments.TransactOpts, _accounts)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address _asset, uint256 _disputePeriod) returns()
func (_Instruments *InstrumentsTransactor) SetDisputePeriod(opts *bind.TransactOpts, _asset common.Address, _disputePeriod *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setDisputePeriod", _asset, _disputePeriod)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address _asset, uint256 _disputePeriod) returns()
func (_Instruments *InstrumentsSession) SetDisputePeriod(_asset common.Address, _disputePeriod *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetDisputePeriod(&_Instruments.TransactOpts, _asset, _disputePeriod)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address _asset, uint256 _disputePeriod) returns()
func (_Instruments *InstrumentsTransactorSession) SetDisputePeriod(_asset common.Address, _disputePeriod *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetDisputePeriod(&_Instruments.TransactOpts, _asset, _disputePeriod)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address _asset, uint256 _expiry, uint256 _expiryPrice) returns()
func (_Instruments *InstrumentsTransactor) SetExpiryPrice(opts *bind.TransactOpts, _asset common.Address, _expiry *big.Int, _expiryPrice *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setExpiryPrice", _asset, _expiry, _expiryPrice)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address _asset, uint256 _expiry, uint256 _expiryPrice) returns()
func (_Instruments *InstrumentsSession) SetExpiryPrice(_asset common.Address, _expiry *big.Int, _expiryPrice *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetExpiryPrice(&_Instruments.TransactOpts, _asset, _expiry, _expiryPrice)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address _asset, uint256 _expiry, uint256 _expiryPrice) returns()
func (_Instruments *InstrumentsTransactorSession) SetExpiryPrice(_asset common.Address, _expiry *big.Int, _expiryPrice *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetExpiryPrice(&_Instruments.TransactOpts, _asset, _expiry, _expiryPrice)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetOwner(&_Instruments.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetOwner(&_Instruments.TransactOpts, newOwner)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactor) SettleOption(opts *bind.TransactOpts, instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "settleOption", instrumentId, start, end, settlementFee)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsSession) SettleOption(instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption(&_Instruments.TransactOpts, instrumentId, start, end, settlementFee)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactorSession) SettleOption(instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption(&_Instruments.TransactOpts, instrumentId, start, end, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactor) SettleOption0(opts *bind.TransactOpts, instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "settleOption0", instrumentId, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsSession) SettleOption0(instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption0(&_Instruments.TransactOpts, instrumentId, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactorSession) SettleOption0(instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption0(&_Instruments.TransactOpts, instrumentId, settlementFee)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0xcf7198ac.
//
// Solidity: function transferInstrument(address from, address to, uint256 instrument, uint256 amount) returns(uint8)
func (_Instruments *InstrumentsTransactor) TransferInstrument(opts *bind.TransactOpts, from common.Address, to common.Address, instrument *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "transferInstrument", from, to, instrument, amount)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0xcf7198ac.
//
// Solidity: function transferInstrument(address from, address to, uint256 instrument, uint256 amount) returns(uint8)
func (_Instruments *InstrumentsSession) TransferInstrument(from common.Address, to common.Address, instrument *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.TransferInstrument(&_Instruments.TransactOpts, from, to, instrument, amount)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0xcf7198ac.
//
// Solidity: function transferInstrument(address from, address to, uint256 instrument, uint256 amount) returns(uint8)
func (_Instruments *InstrumentsTransactorSession) TransferInstrument(from common.Address, to common.Address, instrument *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.TransferInstrument(&_Instruments.TransactOpts, from, to, instrument, amount)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsTransactor) UpdateAuthority(opts *bind.TransactOpts, authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "updateAuthority", authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateAuthority(&_Instruments.TransactOpts, authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsTransactorSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateAuthority(&_Instruments.TransactOpts, authority, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsTransactor) UpdateKeeper(opts *bind.TransactOpts, keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "updateKeeper", keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateKeeper(&_Instruments.TransactOpts, keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsTransactorSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateKeeper(&_Instruments.TransactOpts, keeper, allowed)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeTo(&_Instruments.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeTo(&_Instruments.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeToAndCall(&_Instruments.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeToAndCall(&_Instruments.TransactOpts, newImplementation, data)
}

// InstrumentsAccountsUpdatedIterator is returned from FilterAccountsUpdated and is used to iterate over the raw logs and unpacked data for AccountsUpdated events raised by the Instruments contract.
type InstrumentsAccountsUpdatedIterator struct {
	Event *InstrumentsAccountsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAccountsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAccountsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAccountsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAccountsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAccountsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAccountsUpdated represents a AccountsUpdated event raised by the Instruments contract.
type InstrumentsAccountsUpdated struct {
	Accounts common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAccountsUpdated is a free log retrieval operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) FilterAccountsUpdated(opts *bind.FilterOpts, accounts []common.Address) (*InstrumentsAccountsUpdatedIterator, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsAccountsUpdatedIterator{contract: _Instruments.contract, event: "AccountsUpdated", logs: logs, sub: sub}, nil
}

// WatchAccountsUpdated is a free log subscription operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) WatchAccountsUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsAccountsUpdated, accounts []common.Address) (event.Subscription, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAccountsUpdated)
				if err := _Instruments.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountsUpdated is a log parse operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) ParseAccountsUpdated(log types.Log) (*InstrumentsAccountsUpdated, error) {
	event := new(InstrumentsAccountsUpdated)
	if err := _Instruments.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Instruments contract.
type InstrumentsAdminChangedIterator struct {
	Event *InstrumentsAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAdminChanged represents a AdminChanged event raised by the Instruments contract.
type InstrumentsAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*InstrumentsAdminChangedIterator, error) {

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &InstrumentsAdminChangedIterator{contract: _Instruments.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *InstrumentsAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAdminChanged)
				if err := _Instruments.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) ParseAdminChanged(log types.Log) (*InstrumentsAdminChanged, error) {
	event := new(InstrumentsAdminChanged)
	if err := _Instruments.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsAuthorityUpdatedIterator is returned from FilterAuthorityUpdated and is used to iterate over the raw logs and unpacked data for AuthorityUpdated events raised by the Instruments contract.
type InstrumentsAuthorityUpdatedIterator struct {
	Event *InstrumentsAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAuthorityUpdated represents a AuthorityUpdated event raised by the Instruments contract.
type InstrumentsAuthorityUpdated struct {
	Authority common.Address
	Allowed   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuthorityUpdated is a free log retrieval operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) FilterAuthorityUpdated(opts *bind.FilterOpts, authority []common.Address, allowed []bool) (*InstrumentsAuthorityUpdatedIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsAuthorityUpdatedIterator{contract: _Instruments.contract, event: "AuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorityUpdated is a free log subscription operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) WatchAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsAuthorityUpdated, authority []common.Address, allowed []bool) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAuthorityUpdated)
				if err := _Instruments.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityUpdated is a log parse operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) ParseAuthorityUpdated(log types.Log) (*InstrumentsAuthorityUpdated, error) {
	event := new(InstrumentsAuthorityUpdated)
	if err := _Instruments.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Instruments contract.
type InstrumentsBeaconUpgradedIterator struct {
	Event *InstrumentsBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsBeaconUpgraded represents a BeaconUpgraded event raised by the Instruments contract.
type InstrumentsBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*InstrumentsBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsBeaconUpgradedIterator{contract: _Instruments.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *InstrumentsBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsBeaconUpgraded)
				if err := _Instruments.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) ParseBeaconUpgraded(log types.Log) (*InstrumentsBeaconUpgraded, error) {
	event := new(InstrumentsBeaconUpgraded)
	if err := _Instruments.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsDisputePeriodUpdatedIterator is returned from FilterDisputePeriodUpdated and is used to iterate over the raw logs and unpacked data for DisputePeriodUpdated events raised by the Instruments contract.
type InstrumentsDisputePeriodUpdatedIterator struct {
	Event *InstrumentsDisputePeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsDisputePeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsDisputePeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsDisputePeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsDisputePeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsDisputePeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsDisputePeriodUpdated represents a DisputePeriodUpdated event raised by the Instruments contract.
type InstrumentsDisputePeriodUpdated struct {
	Asset         common.Address
	DisputePeriod *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDisputePeriodUpdated is a free log retrieval operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed disputePeriod)
func (_Instruments *InstrumentsFilterer) FilterDisputePeriodUpdated(opts *bind.FilterOpts, asset []common.Address, disputePeriod []*big.Int) (*InstrumentsDisputePeriodUpdatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var disputePeriodRule []interface{}
	for _, disputePeriodItem := range disputePeriod {
		disputePeriodRule = append(disputePeriodRule, disputePeriodItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "DisputePeriodUpdated", assetRule, disputePeriodRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsDisputePeriodUpdatedIterator{contract: _Instruments.contract, event: "DisputePeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchDisputePeriodUpdated is a free log subscription operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed disputePeriod)
func (_Instruments *InstrumentsFilterer) WatchDisputePeriodUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsDisputePeriodUpdated, asset []common.Address, disputePeriod []*big.Int) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var disputePeriodRule []interface{}
	for _, disputePeriodItem := range disputePeriod {
		disputePeriodRule = append(disputePeriodRule, disputePeriodItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "DisputePeriodUpdated", assetRule, disputePeriodRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsDisputePeriodUpdated)
				if err := _Instruments.contract.UnpackLog(event, "DisputePeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputePeriodUpdated is a log parse operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed disputePeriod)
func (_Instruments *InstrumentsFilterer) ParseDisputePeriodUpdated(log types.Log) (*InstrumentsDisputePeriodUpdated, error) {
	event := new(InstrumentsDisputePeriodUpdated)
	if err := _Instruments.contract.UnpackLog(event, "DisputePeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsKeeperUpdatedIterator is returned from FilterKeeperUpdated and is used to iterate over the raw logs and unpacked data for KeeperUpdated events raised by the Instruments contract.
type InstrumentsKeeperUpdatedIterator struct {
	Event *InstrumentsKeeperUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsKeeperUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsKeeperUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsKeeperUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsKeeperUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsKeeperUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsKeeperUpdated represents a KeeperUpdated event raised by the Instruments contract.
type InstrumentsKeeperUpdated struct {
	Keeper  common.Address
	Allowed bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeeperUpdated is a free log retrieval operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) FilterKeeperUpdated(opts *bind.FilterOpts, keeper []common.Address, allowed []bool) (*InstrumentsKeeperUpdatedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsKeeperUpdatedIterator{contract: _Instruments.contract, event: "KeeperUpdated", logs: logs, sub: sub}, nil
}

// WatchKeeperUpdated is a free log subscription operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) WatchKeeperUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsKeeperUpdated, keeper []common.Address, allowed []bool) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsKeeperUpdated)
				if err := _Instruments.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeeperUpdated is a log parse operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) ParseKeeperUpdated(log types.Log) (*InstrumentsKeeperUpdated, error) {
	event := new(InstrumentsKeeperUpdated)
	if err := _Instruments.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsOwnerUpdatedIterator is returned from FilterOwnerUpdated and is used to iterate over the raw logs and unpacked data for OwnerUpdated events raised by the Instruments contract.
type InstrumentsOwnerUpdatedIterator struct {
	Event *InstrumentsOwnerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsOwnerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsOwnerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsOwnerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsOwnerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsOwnerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsOwnerUpdated represents a OwnerUpdated event raised by the Instruments contract.
type InstrumentsOwnerUpdated struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerUpdated is a free log retrieval operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) FilterOwnerUpdated(opts *bind.FilterOpts, newOwner []common.Address) (*InstrumentsOwnerUpdatedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsOwnerUpdatedIterator{contract: _Instruments.contract, event: "OwnerUpdated", logs: logs, sub: sub}, nil
}

// WatchOwnerUpdated is a free log subscription operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) WatchOwnerUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsOwnerUpdated, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsOwnerUpdated)
				if err := _Instruments.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerUpdated is a log parse operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) ParseOwnerUpdated(log types.Log) (*InstrumentsOwnerUpdated, error) {
	event := new(InstrumentsOwnerUpdated)
	if err := _Instruments.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Instruments contract.
type InstrumentsUpgradedIterator struct {
	Event *InstrumentsUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsUpgraded represents a Upgraded event raised by the Instruments contract.
type InstrumentsUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InstrumentsUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsUpgradedIterator{contract: _Instruments.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InstrumentsUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsUpgraded)
				if err := _Instruments.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) ParseUpgraded(log types.Log) (*InstrumentsUpgraded, error) {
	event := new(InstrumentsUpgraded)
	if err := _Instruments.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsVersionInitializedIterator is returned from FilterVersionInitialized and is used to iterate over the raw logs and unpacked data for VersionInitialized events raised by the Instruments contract.
type InstrumentsVersionInitializedIterator struct {
	Event *InstrumentsVersionInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsVersionInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsVersionInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsVersionInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsVersionInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsVersionInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsVersionInitialized represents a VersionInitialized event raised by the Instruments contract.
type InstrumentsVersionInitialized struct {
	NewVersion *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVersionInitialized is a free log retrieval operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) FilterVersionInitialized(opts *bind.FilterOpts, newVersion []*big.Int) (*InstrumentsVersionInitializedIterator, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsVersionInitializedIterator{contract: _Instruments.contract, event: "VersionInitialized", logs: logs, sub: sub}, nil
}

// WatchVersionInitialized is a free log subscription operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) WatchVersionInitialized(opts *bind.WatchOpts, sink chan<- *InstrumentsVersionInitialized, newVersion []*big.Int) (event.Subscription, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsVersionInitialized)
				if err := _Instruments.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionInitialized is a log parse operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) ParseVersionInitialized(log types.Log) (*InstrumentsVersionInitialized, error) {
	event := new(InstrumentsVersionInitialized)
	if err := _Instruments.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
