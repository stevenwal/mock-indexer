// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OptionsOption is an auto generated low-level Go binding around an user-defined struct.
type OptionsOption struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}

// InstrumentsMetaData contains all meta data concerning the Instruments contract.
var InstrumentsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AboveMaxSettlementFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"BadLoadAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidAddOption\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidSetExpiryPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthority\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Settled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"TransferFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accounts\",\"type\":\"address\"}],\"name\":\"AccountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InstrumentAccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterest\",\"type\":\"uint256\"}],\"name\":\"InstrumentTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"OptionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"VersionInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structOptions.Option\",\"name\":\"option\",\"type\":\"tuple\"}],\"name\":\"addOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disputePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"disputePeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"}],\"name\":\"getInstrumentAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instrumentAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instruments\",\"outputs\":[{\"internalType\":\"enumInstrumentsInterface.InstrumentType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"internalType\":\"structAccountsInterface.Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"position\",\"type\":\"int256\"}],\"internalType\":\"structAccountsInterface.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signingKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structAccountsInterface.SigningKey[]\",\"name\":\"signingKeys\",\"type\":\"tuple[]\"}],\"name\":\"loadAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oi\",\"type\":\"uint256\"}],\"name\":\"loadOpenInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"maxOptionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"}],\"name\":\"maxOptionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"overrideExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"perpetuals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accounts\",\"type\":\"address\"}],\"name\":\"setAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settledInstrumentAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settledLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"}],\"name\":\"totalOptionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferInstrument\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "",
}

// InstrumentsABI is the input ABI used to generate the binding from.
// Deprecated: Use InstrumentsMetaData.ABI instead.
var InstrumentsABI = InstrumentsMetaData.ABI

// InstrumentsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InstrumentsMetaData.Bin instead.
var InstrumentsBin = InstrumentsMetaData.Bin

// DeployInstruments deploys a new Ethereum contract, binding an instance of Instruments to it.
func DeployInstruments(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Instruments, error) {
	parsed, err := InstrumentsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InstrumentsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Instruments{InstrumentsCaller: InstrumentsCaller{contract: contract}, InstrumentsTransactor: InstrumentsTransactor{contract: contract}, InstrumentsFilterer: InstrumentsFilterer{contract: contract}}, nil
}

// Instruments is an auto generated Go binding around an Ethereum contract.
type Instruments struct {
	InstrumentsCaller     // Read-only binding to the contract
	InstrumentsTransactor // Write-only binding to the contract
	InstrumentsFilterer   // Log filterer for contract events
}

// InstrumentsCaller is an auto generated read-only Go binding around an Ethereum contract.
type InstrumentsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InstrumentsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InstrumentsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InstrumentsSession struct {
	Contract     *Instruments      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InstrumentsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InstrumentsCallerSession struct {
	Contract *InstrumentsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// InstrumentsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InstrumentsTransactorSession struct {
	Contract     *InstrumentsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// InstrumentsRaw is an auto generated low-level Go binding around an Ethereum contract.
type InstrumentsRaw struct {
	Contract *Instruments // Generic contract binding to access the raw methods on
}

// InstrumentsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InstrumentsCallerRaw struct {
	Contract *InstrumentsCaller // Generic read-only contract binding to access the raw methods on
}

// InstrumentsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InstrumentsTransactorRaw struct {
	Contract *InstrumentsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInstruments creates a new instance of Instruments, bound to a specific deployed contract.
func NewInstruments(address common.Address, backend bind.ContractBackend) (*Instruments, error) {
	contract, err := bindInstruments(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Instruments{InstrumentsCaller: InstrumentsCaller{contract: contract}, InstrumentsTransactor: InstrumentsTransactor{contract: contract}, InstrumentsFilterer: InstrumentsFilterer{contract: contract}}, nil
}

// NewInstrumentsCaller creates a new read-only instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsCaller(address common.Address, caller bind.ContractCaller) (*InstrumentsCaller, error) {
	contract, err := bindInstruments(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InstrumentsCaller{contract: contract}, nil
}

// NewInstrumentsTransactor creates a new write-only instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsTransactor(address common.Address, transactor bind.ContractTransactor) (*InstrumentsTransactor, error) {
	contract, err := bindInstruments(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InstrumentsTransactor{contract: contract}, nil
}

// NewInstrumentsFilterer creates a new log filterer instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsFilterer(address common.Address, filterer bind.ContractFilterer) (*InstrumentsFilterer, error) {
	contract, err := bindInstruments(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InstrumentsFilterer{contract: contract}, nil
}

// bindInstruments binds a generic wrapper to an already deployed contract.
func bindInstruments(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InstrumentsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Instruments *InstrumentsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Instruments.Contract.InstrumentsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Instruments *InstrumentsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Instruments.Contract.InstrumentsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Instruments *InstrumentsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Instruments.Contract.InstrumentsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Instruments *InstrumentsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Instruments.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Instruments *InstrumentsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Instruments.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Instruments *InstrumentsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Instruments.Contract.contract.Transact(opts, method, params...)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsCaller) Accounts(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "accounts")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsSession) Accounts() (common.Address, error) {
	return _Instruments.Contract.Accounts(&_Instruments.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsCallerSession) Accounts() (common.Address, error) {
	return _Instruments.Contract.Accounts(&_Instruments.CallOpts)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsCaller) Authorities(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "authorities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsSession) Authorities(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Authorities(&_Instruments.CallOpts, arg0)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Authorities(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Authorities(&_Instruments.CallOpts, arg0)
}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsCaller) DisputePeriod(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "disputePeriod", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsSession) DisputePeriod(arg0 common.Address) (*big.Int, error) {
	return _Instruments.Contract.DisputePeriod(&_Instruments.CallOpts, arg0)
}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) DisputePeriod(arg0 common.Address) (*big.Int, error) {
	return _Instruments.Contract.DisputePeriod(&_Instruments.CallOpts, arg0)
}

// DisputePeriodOver is a free data retrieval call binding the contract method 0xdfac3836.
//
// Solidity: function disputePeriodOver(address asset, uint256 expiry) view returns(bool)
func (_Instruments *InstrumentsCaller) DisputePeriodOver(opts *bind.CallOpts, asset common.Address, expiry *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "disputePeriodOver", asset, expiry)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DisputePeriodOver is a free data retrieval call binding the contract method 0xdfac3836.
//
// Solidity: function disputePeriodOver(address asset, uint256 expiry) view returns(bool)
func (_Instruments *InstrumentsSession) DisputePeriodOver(asset common.Address, expiry *big.Int) (bool, error) {
	return _Instruments.Contract.DisputePeriodOver(&_Instruments.CallOpts, asset, expiry)
}

// DisputePeriodOver is a free data retrieval call binding the contract method 0xdfac3836.
//
// Solidity: function disputePeriodOver(address asset, uint256 expiry) view returns(bool)
func (_Instruments *InstrumentsCallerSession) DisputePeriodOver(asset common.Address, expiry *big.Int) (bool, error) {
	return _Instruments.Contract.DisputePeriodOver(&_Instruments.CallOpts, asset, expiry)
}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsCaller) ExpiryPrice(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "expiryPrice", arg0, arg1)

	outstruct := new(struct {
		Price     *big.Int
		Timestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Price = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsSession) ExpiryPrice(arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	return _Instruments.Contract.ExpiryPrice(&_Instruments.CallOpts, arg0, arg1)
}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsCallerSession) ExpiryPrice(arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	return _Instruments.Contract.ExpiryPrice(&_Instruments.CallOpts, arg0, arg1)
}

// GetInstrumentAccounts is a free data retrieval call binding the contract method 0x04a34c2a.
//
// Solidity: function getInstrumentAccounts(uint256 instrument) view returns(address[])
func (_Instruments *InstrumentsCaller) GetInstrumentAccounts(opts *bind.CallOpts, instrument *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "getInstrumentAccounts", instrument)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetInstrumentAccounts is a free data retrieval call binding the contract method 0x04a34c2a.
//
// Solidity: function getInstrumentAccounts(uint256 instrument) view returns(address[])
func (_Instruments *InstrumentsSession) GetInstrumentAccounts(instrument *big.Int) ([]common.Address, error) {
	return _Instruments.Contract.GetInstrumentAccounts(&_Instruments.CallOpts, instrument)
}

// GetInstrumentAccounts is a free data retrieval call binding the contract method 0x04a34c2a.
//
// Solidity: function getInstrumentAccounts(uint256 instrument) view returns(address[])
func (_Instruments *InstrumentsCallerSession) GetInstrumentAccounts(instrument *big.Int) ([]common.Address, error) {
	return _Instruments.Contract.GetInstrumentAccounts(&_Instruments.CallOpts, instrument)
}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCaller) InstrumentAccounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccounts", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsSession) InstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.InstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) InstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.InstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsCaller) Instruments(opts *bind.CallOpts, arg0 *big.Int) (uint8, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instruments", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsSession) Instruments(arg0 *big.Int) (uint8, error) {
	return _Instruments.Contract.Instruments(&_Instruments.CallOpts, arg0)
}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsCallerSession) Instruments(arg0 *big.Int) (uint8, error) {
	return _Instruments.Contract.Instruments(&_Instruments.CallOpts, arg0)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsCaller) Keepers(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "keepers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsSession) Keepers(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Keepers(&_Instruments.CallOpts, arg0)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Keepers(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Keepers(&_Instruments.CallOpts, arg0)
}

// MaxOptionPayout is a free data retrieval call binding the contract method 0x50b32a8e.
//
// Solidity: function maxOptionPayout(uint256 instrument, uint256 start, uint256 stop) view returns(uint256)
func (_Instruments *InstrumentsCaller) MaxOptionPayout(opts *bind.CallOpts, instrument *big.Int, start *big.Int, stop *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "maxOptionPayout", instrument, start, stop)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxOptionPayout is a free data retrieval call binding the contract method 0x50b32a8e.
//
// Solidity: function maxOptionPayout(uint256 instrument, uint256 start, uint256 stop) view returns(uint256)
func (_Instruments *InstrumentsSession) MaxOptionPayout(instrument *big.Int, start *big.Int, stop *big.Int) (*big.Int, error) {
	return _Instruments.Contract.MaxOptionPayout(&_Instruments.CallOpts, instrument, start, stop)
}

// MaxOptionPayout is a free data retrieval call binding the contract method 0x50b32a8e.
//
// Solidity: function maxOptionPayout(uint256 instrument, uint256 start, uint256 stop) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) MaxOptionPayout(instrument *big.Int, start *big.Int, stop *big.Int) (*big.Int, error) {
	return _Instruments.Contract.MaxOptionPayout(&_Instruments.CallOpts, instrument, start, stop)
}

// MaxOptionPayout0 is a free data retrieval call binding the contract method 0xa5812e1d.
//
// Solidity: function maxOptionPayout(uint256 instrument) view returns(uint256)
func (_Instruments *InstrumentsCaller) MaxOptionPayout0(opts *bind.CallOpts, instrument *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "maxOptionPayout0", instrument)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxOptionPayout0 is a free data retrieval call binding the contract method 0xa5812e1d.
//
// Solidity: function maxOptionPayout(uint256 instrument) view returns(uint256)
func (_Instruments *InstrumentsSession) MaxOptionPayout0(instrument *big.Int) (*big.Int, error) {
	return _Instruments.Contract.MaxOptionPayout0(&_Instruments.CallOpts, instrument)
}

// MaxOptionPayout0 is a free data retrieval call binding the contract method 0xa5812e1d.
//
// Solidity: function maxOptionPayout(uint256 instrument) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) MaxOptionPayout0(instrument *big.Int) (*big.Int, error) {
	return _Instruments.Contract.MaxOptionPayout0(&_Instruments.CallOpts, instrument)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsSession) Name() (string, error) {
	return _Instruments.Contract.Name(&_Instruments.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsCallerSession) Name() (string, error) {
	return _Instruments.Contract.Name(&_Instruments.CallOpts)
}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCaller) OpenInterest(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "openInterest", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsSession) OpenInterest(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.OpenInterest(&_Instruments.CallOpts, arg0)
}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) OpenInterest(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.OpenInterest(&_Instruments.CallOpts, arg0)
}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsCaller) Options(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "options", arg0)

	outstruct := new(struct {
		Asset  common.Address
		IsPut  bool
		Strike *big.Int
		Expiry *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Asset = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.IsPut = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.Strike = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Expiry = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsSession) Options(arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	return _Instruments.Contract.Options(&_Instruments.CallOpts, arg0)
}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsCallerSession) Options(arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	return _Instruments.Contract.Options(&_Instruments.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsSession) Owner() (common.Address, error) {
	return _Instruments.Contract.Owner(&_Instruments.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsCallerSession) Owner() (common.Address, error) {
	return _Instruments.Contract.Owner(&_Instruments.CallOpts)
}

// Perpetuals is a free data retrieval call binding the contract method 0x59a1ecaa.
//
// Solidity: function perpetuals(uint256 ) view returns(address)
func (_Instruments *InstrumentsCaller) Perpetuals(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "perpetuals", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Perpetuals is a free data retrieval call binding the contract method 0x59a1ecaa.
//
// Solidity: function perpetuals(uint256 ) view returns(address)
func (_Instruments *InstrumentsSession) Perpetuals(arg0 *big.Int) (common.Address, error) {
	return _Instruments.Contract.Perpetuals(&_Instruments.CallOpts, arg0)
}

// Perpetuals is a free data retrieval call binding the contract method 0x59a1ecaa.
//
// Solidity: function perpetuals(uint256 ) view returns(address)
func (_Instruments *InstrumentsCallerSession) Perpetuals(arg0 *big.Int) (common.Address, error) {
	return _Instruments.Contract.Perpetuals(&_Instruments.CallOpts, arg0)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsSession) ProxiableUUID() ([32]byte, error) {
	return _Instruments.Contract.ProxiableUUID(&_Instruments.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Instruments.Contract.ProxiableUUID(&_Instruments.CallOpts)
}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) Settled(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) Settled(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settled(&_Instruments.CallOpts, arg0)
}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Settled(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settled(&_Instruments.CallOpts, arg0)
}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0xee206169.
//
// Solidity: function settledInstrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCaller) SettledInstrumentAccounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settledInstrumentAccounts", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0xee206169.
//
// Solidity: function settledInstrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsSession) SettledInstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.SettledInstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0xee206169.
//
// Solidity: function settledInstrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) SettledInstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.SettledInstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// SettledLength is a free data retrieval call binding the contract method 0x205e4373.
//
// Solidity: function settledLength(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCaller) SettledLength(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settledLength", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SettledLength is a free data retrieval call binding the contract method 0x205e4373.
//
// Solidity: function settledLength(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsSession) SettledLength(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.SettledLength(&_Instruments.CallOpts, arg0)
}

// SettledLength is a free data retrieval call binding the contract method 0x205e4373.
//
// Solidity: function settledLength(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) SettledLength(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.SettledLength(&_Instruments.CallOpts, arg0)
}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) Settling(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settling", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) Settling(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settling(&_Instruments.CallOpts, arg0)
}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Settling(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settling(&_Instruments.CallOpts, arg0)
}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrument) view returns(uint256)
func (_Instruments *InstrumentsCaller) TotalOptionPayout(opts *bind.CallOpts, instrument *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "totalOptionPayout", instrument)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrument) view returns(uint256)
func (_Instruments *InstrumentsSession) TotalOptionPayout(instrument *big.Int) (*big.Int, error) {
	return _Instruments.Contract.TotalOptionPayout(&_Instruments.CallOpts, instrument)
}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrument) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) TotalOptionPayout(instrument *big.Int) (*big.Int, error) {
	return _Instruments.Contract.TotalOptionPayout(&_Instruments.CallOpts, instrument)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsTransactor) AddOption(opts *bind.TransactOpts, instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "addOption", instrument, option)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsSession) AddOption(instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.Contract.AddOption(&_Instruments.TransactOpts, instrument, option)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsTransactorSession) AddOption(instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.Contract.AddOption(&_Instruments.TransactOpts, instrument, option)
}

// AddPerpetual is a paid mutator transaction binding the contract method 0xebfb62b3.
//
// Solidity: function addPerpetual(uint256 instrument, address asset) returns()
func (_Instruments *InstrumentsTransactor) AddPerpetual(opts *bind.TransactOpts, instrument *big.Int, asset common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "addPerpetual", instrument, asset)
}

// AddPerpetual is a paid mutator transaction binding the contract method 0xebfb62b3.
//
// Solidity: function addPerpetual(uint256 instrument, address asset) returns()
func (_Instruments *InstrumentsSession) AddPerpetual(instrument *big.Int, asset common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.AddPerpetual(&_Instruments.TransactOpts, instrument, asset)
}

// AddPerpetual is a paid mutator transaction binding the contract method 0xebfb62b3.
//
// Solidity: function addPerpetual(uint256 instrument, address asset) returns()
func (_Instruments *InstrumentsTransactorSession) AddPerpetual(instrument *big.Int, asset common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.AddPerpetual(&_Instruments.TransactOpts, instrument, asset)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "initialize", _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.Initialize(&_Instruments.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsTransactorSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.Initialize(&_Instruments.TransactOpts, _owner)
}

// LoadAccount is a paid mutator transaction binding the contract method 0x9d56921f.
//
// Solidity: function loadAccount(address account, (address,int256)[] balances, (uint256,uint256,int256)[] positions, (address,uint256)[] signingKeys) returns()
func (_Instruments *InstrumentsTransactor) LoadAccount(opts *bind.TransactOpts, account common.Address, balances []AccountsInterfaceBalance, positions []AccountsInterfacePosition, signingKeys []AccountsInterfaceSigningKey) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "loadAccount", account, balances, positions, signingKeys)
}

// LoadAccount is a paid mutator transaction binding the contract method 0x9d56921f.
//
// Solidity: function loadAccount(address account, (address,int256)[] balances, (uint256,uint256,int256)[] positions, (address,uint256)[] signingKeys) returns()
func (_Instruments *InstrumentsSession) LoadAccount(account common.Address, balances []AccountsInterfaceBalance, positions []AccountsInterfacePosition, signingKeys []AccountsInterfaceSigningKey) (*types.Transaction, error) {
	return _Instruments.Contract.LoadAccount(&_Instruments.TransactOpts, account, balances, positions, signingKeys)
}

// LoadAccount is a paid mutator transaction binding the contract method 0x9d56921f.
//
// Solidity: function loadAccount(address account, (address,int256)[] balances, (uint256,uint256,int256)[] positions, (address,uint256)[] signingKeys) returns()
func (_Instruments *InstrumentsTransactorSession) LoadAccount(account common.Address, balances []AccountsInterfaceBalance, positions []AccountsInterfacePosition, signingKeys []AccountsInterfaceSigningKey) (*types.Transaction, error) {
	return _Instruments.Contract.LoadAccount(&_Instruments.TransactOpts, account, balances, positions, signingKeys)
}

// LoadOpenInterest is a paid mutator transaction binding the contract method 0x8f5cafcc.
//
// Solidity: function loadOpenInterest(uint256 instrument, uint256 oi) returns()
func (_Instruments *InstrumentsTransactor) LoadOpenInterest(opts *bind.TransactOpts, instrument *big.Int, oi *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "loadOpenInterest", instrument, oi)
}

// LoadOpenInterest is a paid mutator transaction binding the contract method 0x8f5cafcc.
//
// Solidity: function loadOpenInterest(uint256 instrument, uint256 oi) returns()
func (_Instruments *InstrumentsSession) LoadOpenInterest(instrument *big.Int, oi *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.LoadOpenInterest(&_Instruments.TransactOpts, instrument, oi)
}

// LoadOpenInterest is a paid mutator transaction binding the contract method 0x8f5cafcc.
//
// Solidity: function loadOpenInterest(uint256 instrument, uint256 oi) returns()
func (_Instruments *InstrumentsTransactorSession) LoadOpenInterest(instrument *big.Int, oi *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.LoadOpenInterest(&_Instruments.TransactOpts, instrument, oi)
}

// OverrideExpiryPrice is a paid mutator transaction binding the contract method 0xbda9e302.
//
// Solidity: function overrideExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsTransactor) OverrideExpiryPrice(opts *bind.TransactOpts, asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "overrideExpiryPrice", asset, expiry, price)
}

// OverrideExpiryPrice is a paid mutator transaction binding the contract method 0xbda9e302.
//
// Solidity: function overrideExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsSession) OverrideExpiryPrice(asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.OverrideExpiryPrice(&_Instruments.TransactOpts, asset, expiry, price)
}

// OverrideExpiryPrice is a paid mutator transaction binding the contract method 0xbda9e302.
//
// Solidity: function overrideExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsTransactorSession) OverrideExpiryPrice(asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.OverrideExpiryPrice(&_Instruments.TransactOpts, asset, expiry, price)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsTransactor) SetAccounts(opts *bind.TransactOpts, _accounts common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setAccounts", _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetAccounts(&_Instruments.TransactOpts, _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsTransactorSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetAccounts(&_Instruments.TransactOpts, _accounts)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address asset, uint256 period) returns()
func (_Instruments *InstrumentsTransactor) SetDisputePeriod(opts *bind.TransactOpts, asset common.Address, period *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setDisputePeriod", asset, period)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address asset, uint256 period) returns()
func (_Instruments *InstrumentsSession) SetDisputePeriod(asset common.Address, period *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetDisputePeriod(&_Instruments.TransactOpts, asset, period)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address asset, uint256 period) returns()
func (_Instruments *InstrumentsTransactorSession) SetDisputePeriod(asset common.Address, period *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetDisputePeriod(&_Instruments.TransactOpts, asset, period)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsTransactor) SetExpiryPrice(opts *bind.TransactOpts, asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setExpiryPrice", asset, expiry, price)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsSession) SetExpiryPrice(asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetExpiryPrice(&_Instruments.TransactOpts, asset, expiry, price)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsTransactorSession) SetExpiryPrice(asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetExpiryPrice(&_Instruments.TransactOpts, asset, expiry, price)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetOwner(&_Instruments.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetOwner(&_Instruments.TransactOpts, newOwner)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactor) SettleOption(opts *bind.TransactOpts, instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "settleOption", instrumentId, start, end, settlementFee)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsSession) SettleOption(instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption(&_Instruments.TransactOpts, instrumentId, start, end, settlementFee)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactorSession) SettleOption(instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption(&_Instruments.TransactOpts, instrumentId, start, end, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactor) SettleOption0(opts *bind.TransactOpts, instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "settleOption0", instrumentId, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsSession) SettleOption0(instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption0(&_Instruments.TransactOpts, instrumentId, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactorSession) SettleOption0(instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption0(&_Instruments.TransactOpts, instrumentId, settlementFee)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0x991f94a0.
//
// Solidity: function transferInstrument(uint256 instrument, address from, address to, uint256 amount, uint256 price) returns(int256, int256, uint8)
func (_Instruments *InstrumentsTransactor) TransferInstrument(opts *bind.TransactOpts, instrument *big.Int, from common.Address, to common.Address, amount *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "transferInstrument", instrument, from, to, amount, price)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0x991f94a0.
//
// Solidity: function transferInstrument(uint256 instrument, address from, address to, uint256 amount, uint256 price) returns(int256, int256, uint8)
func (_Instruments *InstrumentsSession) TransferInstrument(instrument *big.Int, from common.Address, to common.Address, amount *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.TransferInstrument(&_Instruments.TransactOpts, instrument, from, to, amount, price)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0x991f94a0.
//
// Solidity: function transferInstrument(uint256 instrument, address from, address to, uint256 amount, uint256 price) returns(int256, int256, uint8)
func (_Instruments *InstrumentsTransactorSession) TransferInstrument(instrument *big.Int, from common.Address, to common.Address, amount *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.TransferInstrument(&_Instruments.TransactOpts, instrument, from, to, amount, price)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsTransactor) UpdateAuthority(opts *bind.TransactOpts, authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "updateAuthority", authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateAuthority(&_Instruments.TransactOpts, authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsTransactorSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateAuthority(&_Instruments.TransactOpts, authority, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsTransactor) UpdateKeeper(opts *bind.TransactOpts, keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "updateKeeper", keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateKeeper(&_Instruments.TransactOpts, keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsTransactorSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateKeeper(&_Instruments.TransactOpts, keeper, allowed)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeTo(&_Instruments.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeTo(&_Instruments.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeToAndCall(&_Instruments.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeToAndCall(&_Instruments.TransactOpts, newImplementation, data)
}

// InstrumentsAccountsUpdatedIterator is returned from FilterAccountsUpdated and is used to iterate over the raw logs and unpacked data for AccountsUpdated events raised by the Instruments contract.
type InstrumentsAccountsUpdatedIterator struct {
	Event *InstrumentsAccountsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAccountsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAccountsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAccountsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAccountsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAccountsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAccountsUpdated represents a AccountsUpdated event raised by the Instruments contract.
type InstrumentsAccountsUpdated struct {
	Accounts common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAccountsUpdated is a free log retrieval operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) FilterAccountsUpdated(opts *bind.FilterOpts, accounts []common.Address) (*InstrumentsAccountsUpdatedIterator, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsAccountsUpdatedIterator{contract: _Instruments.contract, event: "AccountsUpdated", logs: logs, sub: sub}, nil
}

// WatchAccountsUpdated is a free log subscription operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) WatchAccountsUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsAccountsUpdated, accounts []common.Address) (event.Subscription, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAccountsUpdated)
				if err := _Instruments.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountsUpdated is a log parse operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) ParseAccountsUpdated(log types.Log) (*InstrumentsAccountsUpdated, error) {
	event := new(InstrumentsAccountsUpdated)
	if err := _Instruments.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Instruments contract.
type InstrumentsAdminChangedIterator struct {
	Event *InstrumentsAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAdminChanged represents a AdminChanged event raised by the Instruments contract.
type InstrumentsAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*InstrumentsAdminChangedIterator, error) {

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &InstrumentsAdminChangedIterator{contract: _Instruments.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *InstrumentsAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAdminChanged)
				if err := _Instruments.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) ParseAdminChanged(log types.Log) (*InstrumentsAdminChanged, error) {
	event := new(InstrumentsAdminChanged)
	if err := _Instruments.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsAuthorityUpdatedIterator is returned from FilterAuthorityUpdated and is used to iterate over the raw logs and unpacked data for AuthorityUpdated events raised by the Instruments contract.
type InstrumentsAuthorityUpdatedIterator struct {
	Event *InstrumentsAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAuthorityUpdated represents a AuthorityUpdated event raised by the Instruments contract.
type InstrumentsAuthorityUpdated struct {
	Authority common.Address
	Allowed   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuthorityUpdated is a free log retrieval operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) FilterAuthorityUpdated(opts *bind.FilterOpts, authority []common.Address, allowed []bool) (*InstrumentsAuthorityUpdatedIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsAuthorityUpdatedIterator{contract: _Instruments.contract, event: "AuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorityUpdated is a free log subscription operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) WatchAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsAuthorityUpdated, authority []common.Address, allowed []bool) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAuthorityUpdated)
				if err := _Instruments.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityUpdated is a log parse operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) ParseAuthorityUpdated(log types.Log) (*InstrumentsAuthorityUpdated, error) {
	event := new(InstrumentsAuthorityUpdated)
	if err := _Instruments.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Instruments contract.
type InstrumentsBeaconUpgradedIterator struct {
	Event *InstrumentsBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsBeaconUpgraded represents a BeaconUpgraded event raised by the Instruments contract.
type InstrumentsBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*InstrumentsBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsBeaconUpgradedIterator{contract: _Instruments.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *InstrumentsBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsBeaconUpgraded)
				if err := _Instruments.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) ParseBeaconUpgraded(log types.Log) (*InstrumentsBeaconUpgraded, error) {
	event := new(InstrumentsBeaconUpgraded)
	if err := _Instruments.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsDisputePeriodUpdatedIterator is returned from FilterDisputePeriodUpdated and is used to iterate over the raw logs and unpacked data for DisputePeriodUpdated events raised by the Instruments contract.
type InstrumentsDisputePeriodUpdatedIterator struct {
	Event *InstrumentsDisputePeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsDisputePeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsDisputePeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsDisputePeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsDisputePeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsDisputePeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsDisputePeriodUpdated represents a DisputePeriodUpdated event raised by the Instruments contract.
type InstrumentsDisputePeriodUpdated struct {
	Asset  common.Address
	Period *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDisputePeriodUpdated is a free log retrieval operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed period)
func (_Instruments *InstrumentsFilterer) FilterDisputePeriodUpdated(opts *bind.FilterOpts, asset []common.Address, period []*big.Int) (*InstrumentsDisputePeriodUpdatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var periodRule []interface{}
	for _, periodItem := range period {
		periodRule = append(periodRule, periodItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "DisputePeriodUpdated", assetRule, periodRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsDisputePeriodUpdatedIterator{contract: _Instruments.contract, event: "DisputePeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchDisputePeriodUpdated is a free log subscription operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed period)
func (_Instruments *InstrumentsFilterer) WatchDisputePeriodUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsDisputePeriodUpdated, asset []common.Address, period []*big.Int) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var periodRule []interface{}
	for _, periodItem := range period {
		periodRule = append(periodRule, periodItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "DisputePeriodUpdated", assetRule, periodRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsDisputePeriodUpdated)
				if err := _Instruments.contract.UnpackLog(event, "DisputePeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputePeriodUpdated is a log parse operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed period)
func (_Instruments *InstrumentsFilterer) ParseDisputePeriodUpdated(log types.Log) (*InstrumentsDisputePeriodUpdated, error) {
	event := new(InstrumentsDisputePeriodUpdated)
	if err := _Instruments.contract.UnpackLog(event, "DisputePeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsExpiryPriceSetIterator is returned from FilterExpiryPriceSet and is used to iterate over the raw logs and unpacked data for ExpiryPriceSet events raised by the Instruments contract.
type InstrumentsExpiryPriceSetIterator struct {
	Event *InstrumentsExpiryPriceSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsExpiryPriceSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsExpiryPriceSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsExpiryPriceSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsExpiryPriceSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsExpiryPriceSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsExpiryPriceSet represents a ExpiryPriceSet event raised by the Instruments contract.
type InstrumentsExpiryPriceSet struct {
	Asset  common.Address
	Expiry *big.Int
	Price  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExpiryPriceSet is a free log retrieval operation binding the contract event 0x8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7.
//
// Solidity: event ExpiryPriceSet(address indexed asset, uint256 indexed expiry, uint256 price)
func (_Instruments *InstrumentsFilterer) FilterExpiryPriceSet(opts *bind.FilterOpts, asset []common.Address, expiry []*big.Int) (*InstrumentsExpiryPriceSetIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "ExpiryPriceSet", assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsExpiryPriceSetIterator{contract: _Instruments.contract, event: "ExpiryPriceSet", logs: logs, sub: sub}, nil
}

// WatchExpiryPriceSet is a free log subscription operation binding the contract event 0x8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7.
//
// Solidity: event ExpiryPriceSet(address indexed asset, uint256 indexed expiry, uint256 price)
func (_Instruments *InstrumentsFilterer) WatchExpiryPriceSet(opts *bind.WatchOpts, sink chan<- *InstrumentsExpiryPriceSet, asset []common.Address, expiry []*big.Int) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "ExpiryPriceSet", assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsExpiryPriceSet)
				if err := _Instruments.contract.UnpackLog(event, "ExpiryPriceSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExpiryPriceSet is a log parse operation binding the contract event 0x8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7.
//
// Solidity: event ExpiryPriceSet(address indexed asset, uint256 indexed expiry, uint256 price)
func (_Instruments *InstrumentsFilterer) ParseExpiryPriceSet(log types.Log) (*InstrumentsExpiryPriceSet, error) {
	event := new(InstrumentsExpiryPriceSet)
	if err := _Instruments.contract.UnpackLog(event, "ExpiryPriceSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsInstrumentAccountAddedIterator is returned from FilterInstrumentAccountAdded and is used to iterate over the raw logs and unpacked data for InstrumentAccountAdded events raised by the Instruments contract.
type InstrumentsInstrumentAccountAddedIterator struct {
	Event *InstrumentsInstrumentAccountAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsInstrumentAccountAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsInstrumentAccountAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsInstrumentAccountAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsInstrumentAccountAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsInstrumentAccountAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsInstrumentAccountAdded represents a InstrumentAccountAdded event raised by the Instruments contract.
type InstrumentsInstrumentAccountAdded struct {
	Instrument *big.Int
	Account    common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInstrumentAccountAdded is a free log retrieval operation binding the contract event 0xd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f.
//
// Solidity: event InstrumentAccountAdded(uint256 indexed instrument, address indexed account)
func (_Instruments *InstrumentsFilterer) FilterInstrumentAccountAdded(opts *bind.FilterOpts, instrument []*big.Int, account []common.Address) (*InstrumentsInstrumentAccountAddedIterator, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "InstrumentAccountAdded", instrumentRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsInstrumentAccountAddedIterator{contract: _Instruments.contract, event: "InstrumentAccountAdded", logs: logs, sub: sub}, nil
}

// WatchInstrumentAccountAdded is a free log subscription operation binding the contract event 0xd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f.
//
// Solidity: event InstrumentAccountAdded(uint256 indexed instrument, address indexed account)
func (_Instruments *InstrumentsFilterer) WatchInstrumentAccountAdded(opts *bind.WatchOpts, sink chan<- *InstrumentsInstrumentAccountAdded, instrument []*big.Int, account []common.Address) (event.Subscription, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "InstrumentAccountAdded", instrumentRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsInstrumentAccountAdded)
				if err := _Instruments.contract.UnpackLog(event, "InstrumentAccountAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstrumentAccountAdded is a log parse operation binding the contract event 0xd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f.
//
// Solidity: event InstrumentAccountAdded(uint256 indexed instrument, address indexed account)
func (_Instruments *InstrumentsFilterer) ParseInstrumentAccountAdded(log types.Log) (*InstrumentsInstrumentAccountAdded, error) {
	event := new(InstrumentsInstrumentAccountAdded)
	if err := _Instruments.contract.UnpackLog(event, "InstrumentAccountAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsInstrumentTransferredIterator is returned from FilterInstrumentTransferred and is used to iterate over the raw logs and unpacked data for InstrumentTransferred events raised by the Instruments contract.
type InstrumentsInstrumentTransferredIterator struct {
	Event *InstrumentsInstrumentTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsInstrumentTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsInstrumentTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsInstrumentTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsInstrumentTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsInstrumentTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsInstrumentTransferred represents a InstrumentTransferred event raised by the Instruments contract.
type InstrumentsInstrumentTransferred struct {
	Instrument   *big.Int
	From         common.Address
	To           common.Address
	Amount       *big.Int
	OpenInterest *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterInstrumentTransferred is a free log retrieval operation binding the contract event 0xea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c.
//
// Solidity: event InstrumentTransferred(uint256 indexed instrument, address indexed from, address indexed to, uint256 amount, uint256 openInterest)
func (_Instruments *InstrumentsFilterer) FilterInstrumentTransferred(opts *bind.FilterOpts, instrument []*big.Int, from []common.Address, to []common.Address) (*InstrumentsInstrumentTransferredIterator, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "InstrumentTransferred", instrumentRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsInstrumentTransferredIterator{contract: _Instruments.contract, event: "InstrumentTransferred", logs: logs, sub: sub}, nil
}

// WatchInstrumentTransferred is a free log subscription operation binding the contract event 0xea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c.
//
// Solidity: event InstrumentTransferred(uint256 indexed instrument, address indexed from, address indexed to, uint256 amount, uint256 openInterest)
func (_Instruments *InstrumentsFilterer) WatchInstrumentTransferred(opts *bind.WatchOpts, sink chan<- *InstrumentsInstrumentTransferred, instrument []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "InstrumentTransferred", instrumentRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsInstrumentTransferred)
				if err := _Instruments.contract.UnpackLog(event, "InstrumentTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstrumentTransferred is a log parse operation binding the contract event 0xea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c.
//
// Solidity: event InstrumentTransferred(uint256 indexed instrument, address indexed from, address indexed to, uint256 amount, uint256 openInterest)
func (_Instruments *InstrumentsFilterer) ParseInstrumentTransferred(log types.Log) (*InstrumentsInstrumentTransferred, error) {
	event := new(InstrumentsInstrumentTransferred)
	if err := _Instruments.contract.UnpackLog(event, "InstrumentTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsKeeperUpdatedIterator is returned from FilterKeeperUpdated and is used to iterate over the raw logs and unpacked data for KeeperUpdated events raised by the Instruments contract.
type InstrumentsKeeperUpdatedIterator struct {
	Event *InstrumentsKeeperUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsKeeperUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsKeeperUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsKeeperUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsKeeperUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsKeeperUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsKeeperUpdated represents a KeeperUpdated event raised by the Instruments contract.
type InstrumentsKeeperUpdated struct {
	Keeper  common.Address
	Allowed bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeeperUpdated is a free log retrieval operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) FilterKeeperUpdated(opts *bind.FilterOpts, keeper []common.Address, allowed []bool) (*InstrumentsKeeperUpdatedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsKeeperUpdatedIterator{contract: _Instruments.contract, event: "KeeperUpdated", logs: logs, sub: sub}, nil
}

// WatchKeeperUpdated is a free log subscription operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) WatchKeeperUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsKeeperUpdated, keeper []common.Address, allowed []bool) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsKeeperUpdated)
				if err := _Instruments.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeeperUpdated is a log parse operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) ParseKeeperUpdated(log types.Log) (*InstrumentsKeeperUpdated, error) {
	event := new(InstrumentsKeeperUpdated)
	if err := _Instruments.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsOptionAddedIterator is returned from FilterOptionAdded and is used to iterate over the raw logs and unpacked data for OptionAdded events raised by the Instruments contract.
type InstrumentsOptionAddedIterator struct {
	Event *InstrumentsOptionAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsOptionAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsOptionAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsOptionAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsOptionAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsOptionAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsOptionAdded represents a OptionAdded event raised by the Instruments contract.
type InstrumentsOptionAdded struct {
	Instrument *big.Int
	Asset      common.Address
	Expiry     *big.Int
	IsPut      bool
	Strike     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOptionAdded is a free log retrieval operation binding the contract event 0x8a3e5ee639fc2822a7d3969b04dabf44aa1249f1565d8b09b4940c64a1fa24d6.
//
// Solidity: event OptionAdded(uint256 indexed instrument, address indexed asset, uint256 indexed expiry, bool isPut, uint256 strike)
func (_Instruments *InstrumentsFilterer) FilterOptionAdded(opts *bind.FilterOpts, instrument []*big.Int, asset []common.Address, expiry []*big.Int) (*InstrumentsOptionAddedIterator, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "OptionAdded", instrumentRule, assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsOptionAddedIterator{contract: _Instruments.contract, event: "OptionAdded", logs: logs, sub: sub}, nil
}

// WatchOptionAdded is a free log subscription operation binding the contract event 0x8a3e5ee639fc2822a7d3969b04dabf44aa1249f1565d8b09b4940c64a1fa24d6.
//
// Solidity: event OptionAdded(uint256 indexed instrument, address indexed asset, uint256 indexed expiry, bool isPut, uint256 strike)
func (_Instruments *InstrumentsFilterer) WatchOptionAdded(opts *bind.WatchOpts, sink chan<- *InstrumentsOptionAdded, instrument []*big.Int, asset []common.Address, expiry []*big.Int) (event.Subscription, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "OptionAdded", instrumentRule, assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsOptionAdded)
				if err := _Instruments.contract.UnpackLog(event, "OptionAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptionAdded is a log parse operation binding the contract event 0x8a3e5ee639fc2822a7d3969b04dabf44aa1249f1565d8b09b4940c64a1fa24d6.
//
// Solidity: event OptionAdded(uint256 indexed instrument, address indexed asset, uint256 indexed expiry, bool isPut, uint256 strike)
func (_Instruments *InstrumentsFilterer) ParseOptionAdded(log types.Log) (*InstrumentsOptionAdded, error) {
	event := new(InstrumentsOptionAdded)
	if err := _Instruments.contract.UnpackLog(event, "OptionAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsOwnerUpdatedIterator is returned from FilterOwnerUpdated and is used to iterate over the raw logs and unpacked data for OwnerUpdated events raised by the Instruments contract.
type InstrumentsOwnerUpdatedIterator struct {
	Event *InstrumentsOwnerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsOwnerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsOwnerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsOwnerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsOwnerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsOwnerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsOwnerUpdated represents a OwnerUpdated event raised by the Instruments contract.
type InstrumentsOwnerUpdated struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerUpdated is a free log retrieval operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) FilterOwnerUpdated(opts *bind.FilterOpts, newOwner []common.Address) (*InstrumentsOwnerUpdatedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsOwnerUpdatedIterator{contract: _Instruments.contract, event: "OwnerUpdated", logs: logs, sub: sub}, nil
}

// WatchOwnerUpdated is a free log subscription operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) WatchOwnerUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsOwnerUpdated, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsOwnerUpdated)
				if err := _Instruments.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerUpdated is a log parse operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) ParseOwnerUpdated(log types.Log) (*InstrumentsOwnerUpdated, error) {
	event := new(InstrumentsOwnerUpdated)
	if err := _Instruments.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Instruments contract.
type InstrumentsUpgradedIterator struct {
	Event *InstrumentsUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsUpgraded represents a Upgraded event raised by the Instruments contract.
type InstrumentsUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InstrumentsUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsUpgradedIterator{contract: _Instruments.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InstrumentsUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsUpgraded)
				if err := _Instruments.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) ParseUpgraded(log types.Log) (*InstrumentsUpgraded, error) {
	event := new(InstrumentsUpgraded)
	if err := _Instruments.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsVersionInitializedIterator is returned from FilterVersionInitialized and is used to iterate over the raw logs and unpacked data for VersionInitialized events raised by the Instruments contract.
type InstrumentsVersionInitializedIterator struct {
	Event *InstrumentsVersionInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsVersionInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsVersionInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsVersionInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsVersionInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsVersionInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsVersionInitialized represents a VersionInitialized event raised by the Instruments contract.
type InstrumentsVersionInitialized struct {
	NewVersion *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVersionInitialized is a free log retrieval operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) FilterVersionInitialized(opts *bind.FilterOpts, newVersion []*big.Int) (*InstrumentsVersionInitializedIterator, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsVersionInitializedIterator{contract: _Instruments.contract, event: "VersionInitialized", logs: logs, sub: sub}, nil
}

// WatchVersionInitialized is a free log subscription operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) WatchVersionInitialized(opts *bind.WatchOpts, sink chan<- *InstrumentsVersionInitialized, newVersion []*big.Int) (event.Subscription, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsVersionInitialized)
				if err := _Instruments.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionInitialized is a log parse operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) ParseVersionInitialized(log types.Log) (*InstrumentsVersionInitialized, error) {
	event := new(InstrumentsVersionInitialized)
	if err := _Instruments.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
