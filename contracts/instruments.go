// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OptionsOption is an auto generated low-level Go binding around an user-defined struct.
type OptionsOption struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}

// InstrumentsMetaData contains all meta data concerning the Instruments contract.
var InstrumentsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AboveMaxSettlementFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidAddOption\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidSetExpiryPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeSettlementFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthority\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Settled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"TransferFeeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accounts\",\"type\":\"address\"}],\"name\":\"AccountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InstrumentAccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterest\",\"type\":\"uint256\"}],\"name\":\"InstrumentTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"OptionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"VersionInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structOptions.Option\",\"name\":\"option\",\"type\":\"tuple\"}],\"name\":\"addOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disputePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instrumentAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instrumentAccountsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"}],\"name\":\"instrumentAccountsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instruments\",\"outputs\":[{\"internalType\":\"enumInstrumentsInterface.InstrumentType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"isDisputePeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numSettledAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"overrideExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accounts\",\"type\":\"address\"}],\"name\":\"setAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryPrice\",\"type\":\"uint256\"}],\"name\":\"setExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settledInstrumentAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"}],\"name\":\"totalOptionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferInstrument\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"enumInstrumentsInterface.RevertReason\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051612f6061004c60003960008181610894015281816108dd015281816109bb015281816109fb0152610a8e0152612f606000f3fe6080604052600436106101f95760003560e01c80635fdc71491161010d5780639d5bb5c0116100a0578063c7f9df8b1161006f578063c7f9df8b14610708578063d305787714610738578063dee52b6414610758578063e6a97e44146107ac578063ee531409146107cc57600080fd5b80639d5bb5c01461067b578063bda9e3021461069b578063c1ece4dd146106bb578063c4d66de8146106e857600080fd5b80638b3cddaf116100dc5780638b3cddaf146105dc5780638da5cb5b146105fc57806391223d691461061c578063991f94a01461064c57600080fd5b80635fdc71491461054f57806368cd03f61461056f5780636cd22eaf1461058f57806388e53ec8146105af57600080fd5b80632834578011610190578063432a4e7d1161015f578063432a4e7d146104ba578063484fd4e1146104da5780634f1ef2861461050757806352d1902d1461051a5780635af9ac0a1461052f57600080fd5b806328345780146103bf5780633659cfe6146103ef5780633bbd64bc1461040f578063409e22051461043f57600080fd5b806313af4035116101cc57806313af4035146102dc5780631648bb43146102fc57806319b57f9b1461034757806322bbad0b1461038257600080fd5b8063059f6b07146101fe57806306fdde031461023e57806308274382146102825780630c6caff8146102a4575b600080fd5b34801561020a57600080fd5b5061022b610219366004612794565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561024a57600080fd5b506102756040518060400160405280600b81526020016a496e737472756d656e747360a81b81525081565b60405161023591906127dd565b34801561028e57600080fd5b506102a261029d366004612794565b6107ec565b005b3480156102b057600080fd5b506102c46102bf366004612810565b61083e565b6040516001600160a01b039091168152602001610235565b3480156102e857600080fd5b506102a26102f7366004612794565b610876565b34801561030857600080fd5b50610337610317366004612810565b601060209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610235565b34801561035357600080fd5b50610337610362366004612832565b600c60209081526000928352604080842090915290825290205460ff1681565b34801561038e57600080fd5b506103b261039d366004612862565b60076020526000908152604090205460ff1681565b6040516102359190612891565b3480156103cb57600080fd5b506103376103da366004612862565b600e6020526000908152604090205460ff1681565b3480156103fb57600080fd5b506102a261040a366004612794565b61088a565b34801561041b57600080fd5b5061033761042a366004612794565b60046020526000908152604090205460ff1681565b34801561044b57600080fd5b5061049061045a366004612862565b6011602052600090815260409020805460018201546002909201546001600160a01b03821692600160a01b90920460ff16919084565b604080516001600160a01b0390951685529215156020850152918301526060820152608001610235565b3480156104c657600080fd5b506102a26104d53660046128ab565b61096f565b3480156104e657600080fd5b5061022b6104f5366004612862565b600f6020526000908152604090205481565b6102a26105153660046128f3565b6109b1565b34801561052657600080fd5b5061022b610a81565b34801561053b57600080fd5b5061022b61054a366004612862565b610b34565b34801561055b57600080fd5b5061033761056a3660046129b7565b610cb3565b34801561057b57600080fd5b506005546102c4906001600160a01b031681565b34801561059b57600080fd5b506102a26105aa3660046129f1565b610d33565b3480156105bb57600080fd5b5061022b6105ca366004612862565b60086020526000908152604090205481565b3480156105e857600080fd5b506102a26105f73660046129b7565b610db6565b34801561060857600080fd5b506000546102c4906001600160a01b031681565b34801561062857600080fd5b50610337610637366004612794565b60036020526000908152604090205460ff1681565b34801561065857600080fd5b5061066c610667366004612a1f565b610e05565b60405161023593929190612a85565b34801561068757600080fd5b506102a2610696366004612810565b611025565b3480156106a757600080fd5b506102a26106b6366004612aa0565b611070565b3480156106c757600080fd5b5061022b6106d6366004612862565b6000908152600b602052604090205490565b3480156106f457600080fd5b506102a2610703366004612794565b61113b565b34801561071457600080fd5b50610337610723366004612862565b600d6020526000908152604090205460ff1681565b34801561074457600080fd5b506102a26107533660046129f1565b6111b3565b34801561076457600080fd5b506107976107733660046129b7565b60096020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610235565b3480156107b857600080fd5b506102a26107c7366004612ad5565b611236565b3480156107d857600080fd5b506102a26107e7366004612aa0565b61134c565b6107f4611460565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d90600090a250565b600b602052816000526040600020818154811061085a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b61087e611460565b6108878161148c565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108db5760405162461bcd60e51b81526004016108d290612b0d565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610924600080516020612f0d833981519152546001600160a01b031690565b6001600160a01b03161461094a5760405162461bcd60e51b81526004016108d290612b59565b610953816114fb565b6040805160008082526020820190925261088791839190611503565b3360009081526004602052604090205460ff1661099f57604051631ea2564f60e31b815260040160405180910390fd5b6109ab8484848461166e565b50505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109f95760405162461bcd60e51b81526004016108d290612b0d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a42600080516020612f0d833981519152546001600160a01b031690565b6001600160a01b031614610a685760405162461bcd60e51b81526004016108d290612b59565b610a71826114fb565b610a7d82826001611503565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b215760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108d2565b50600080516020612f0d83398151915290565b6000600160008381526007602052604090205460ff166002811115610b5b57610b5b61287b565b14610b7957604051637c7748a160e11b815260040160405180910390fd5b600082815260116020908152604091829020825160808101845281546001600160a01b0381168252600160a01b900460ff1615159281019290925260018101549282019290925260029091015460608201819052421015610bdd5750600092915050565b6000838152601160209081526040808320546001600160a01b03168352600982528083206060850151845290915281205490819003610c20575060009392505050565b600084815260086020908152604091829020546005548351633fd1e2bd60e01b81529351610cab94929386936001600160a01b0390931692633fd1e2bd92600480830193928290030181865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190612ba5565b85929190611f3b565b949350505050565b6001600160a01b0382166000908152600960209081526040808320848452825280832081518083019092528054825260010154918101829052908203610cfd576000915050610d2d565b6001600160a01b03841660009081526006602090815260409091205490820151610d279190612bde565b42119150505b92915050565b610d3b611460565b6001600160a01b038216610d625760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216600081815260036020526040808220805460ff191685151590811790915590519092917fc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc91a35050565b610dbe611460565b6001600160a01b038216600081815260066020526040808220849055518392917f6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a791a35050565b336000908152600360205260408120548190819060ff16610e3957604051631890934360e11b815260040160405180910390fd5b610e41611f6e565b6005546001600160a01b03166000610e5b828b8b8b611f97565b60405163ac759c7160e01b81526001600160a01b038b81166004830152602482018d9052604482018a90526064820189905291925060009182919085169063ac759c71906084016060604051808303816000875af1158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190612c05565b90935091506000905081600c811115610f0057610f0061287b565b14610f2057600080610f11836120bd565b96509650965050505050611012565b50610f2b8b8b61212e565b604051634434d1f960e11b81526001600160a01b038a81166004830152602482018d9052604482018a9052606482018990526000918291861690638869a3f2906084016060604051808303816000875af1158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb19190612c05565b90935091506000905081600c811115610fcc57610fcc61287b565b14610fed57600080610fdd836120bd565b9750975097505050505050611012565b50610ff88c8b61212e565b611006848d8d8d8d886121e0565b90955093506000925050505b6001600281905550955095509592505050565b3360009081526004602052604090205460ff1661105557604051631ea2564f60e31b815260040160405180910390fd5b6000828152600b6020526040812054610a7d9184918461166e565b611078611460565b428211156110995760405163d0404f8560e01b815260040160405180910390fd5b6110a38383610cb3565b156110c157604051631e3b157760e01b815260040160405180910390fd5b6040805180820182528281524260208083019182526001600160a01b038716600081815260098352858120888252835285902093518455915160019093019290925591518381528492917f8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7910160405180910390a3505050565b60016111478180612c3a565b60015414611168576040516302ed543d60e51b815260040160405180910390fd5b806001036111765760016002555b61117f8261148c565b600181905560405181907f7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d90600090a25050565b6111bb611460565b6001600160a01b0382166111e25760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216600081815260046020526040808220805460ff191685151590811790915590519092917f786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c0091a35050565b3360009081526004602052604090205460ff1661126657604051631ea2564f60e31b815260040160405180910390fd5b60008281526007602052604081205460ff1660028111156112895761128961287b565b146112a757604051636f1c629d60e01b815260040160405180910390fd5b6000828152600760209081526040808320805460ff191660011790556011909152902081906112d68282612c51565b505060055460405163474c8b0360e11b8152600481018490526001600160a01b0390911690638e991606906024016020604051808303816000875af1158015611323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113479190612cbf565b505050565b3360009081526004602052604090205460ff1661137c57604051631ea2564f60e31b815260040160405180910390fd5b6113868383610cb3565b156113a457604051631e3b157760e01b815260040160405180910390fd5b428211156113c55760405163d0404f8560e01b815260040160405180910390fd5b6001600160a01b0383166000908152600960209081526040808320858452825291829020825180840184528154815260019091015481830190815283518085019094528484525190929182019015611421578260200151611423565b425b90526001600160a01b0390941660009081526009602090815260408083209583529481529390208451815593909201516001909301929092555050565b6000546001600160a01b0316331461148a576040516282b42960e81b815260040160405180910390fd5b565b6001600160a01b0381166114b35760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b91a250565b610887611460565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561153657611347836122a1565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611590575060408051601f3d908101601f1916820190925261158d91810190612cda565b60015b6115f35760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108d2565b600080516020612f0d83398151915281146116625760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108d2565b5061134783838361233d565b61167a6006600a612dd7565b611685906064612de3565b8111156116a5576040516362293b4960e11b815260040160405180910390fd5b600160008581526007602052604090205460ff1660028111156116ca576116ca61287b565b146116e857604051637c7748a160e11b815260040160405180910390fd5b6000848152600e602052604090205460ff1615611718576040516397088ec360e01b815260040160405180910390fd5b6000848152600d602052604090205460ff16611748576000848152600d60205260409020805460ff191660011790555b600084815260116020908152604091829020825160808101845281546001600160a01b038116808352600160a01b90910460ff1615159382019390935260018201549381019390935260020154606083018190526117a69190610cb3565b6117c357604051631e3b157760e01b815260040160405180910390fd5b42816060015111156117e85760405163d0404f8560e01b815260040160405180910390fd5b6000858152600860205260408120549081900361181f5750506000848152600e60205260409020805460ff191660011790556109ab565b600061182a87610b34565b905080600003611855575050506000848152600e60205260409020805460ff191660011790556109ab565b6000878152600b6020908152604080832054600554825163999b93af60e01b815292519194936001600160a01b039091169263999b93af92600480830193928290030181865afa1580156118ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d19190612e02565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663158626f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c9190612e02565b9050885b88811015611cc95760008b8152600b6020526040812080548390811061197857611978612e1f565b9060005260206000200160009054906101000a90046001600160a01b031690506000600560009054906101000a90046001600160a01b03166001600160a01b03166349ad755b838f6040518363ffffffff1660e01b81526004016119f19291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190612cda565b60008e815260106020908152604080832087845290915290205490915060ff16611abd5760008d8152600f60205260408120805460019290611a75908490612bde565b909155505060008d81526010602090815260408083208684529091529020805460ff191660011790556001600160a01b0380851690831603611ab8575050611cb7565b611ac4565b5050611cb7565b600560009054906101000a90046001600160a01b03166001600160a01b0316639aeddeff838f6040518363ffffffff1660e01b8152600401611b1b9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e9190612cbf565b506000811315611c1857600088611b758984612de3565b611b7f9190612e35565b90506000611b8f8f838e8a612362565b6005549091506001600160a01b0316637de182c58589611baf8587612c3a565b6040518463ffffffff1660e01b8152600401611bcd93929190612e57565b60408051808303816000875af1158015611beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0f9190612e7b565b50505050611cb4565b60008888611c2584612ea7565b611c2f9190612de3565b611c399190612e35565b60055460405163131384f360e11b81529192506001600160a01b03169063262709e690611c6e9086908a908690600401612e57565b60408051808303816000875af1158015611c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb09190612e7b565b5050505b50505b80611cc181612ec3565b915050611950565b5060008a8152600f6020526040902054839003611f2f576005546040516349ad755b60e01b81526001600160a01b038381166004830152602482018d905260009216906349ad755b90604401602060405180830381865afa158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d569190612cda565b600554604051639aeddeff60e01b81526001600160a01b038581166004830152602482018f9052929350911690639aeddeff906044016020604051808303816000875af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190612cbf565b506000811315611e6f57600086611de68784612de3565b611df09190612e35565b600554604051637de182c560e01b81529192506001600160a01b031690637de182c590611e2590869088908690600401612e57565b60408051808303816000875af1158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e679190612e7b565b505050611f14565b6000811215611f145760008686611e8584612ea7565b611e8f9190612de3565b611e999190612e35565b60055460405163131384f360e11b81529192506001600160a01b03169063262709e690611ece90869088908690600401612e57565b60408051808303816000875af1158015611eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f109190612e7b565b5050505b5060008a8152600e60205260409020805460ff191660011790555b50505050505050505050565b6000846020015115611f5e57611f5785604001518486856124bd565b9050610cab565b611f578560400151848685612571565b600254600114611f915760405163558a1e0360e11b815260040160405180910390fd5b60028055565b6040516349ad755b60e01b81526001600160a01b0383811660048301526024820185905260009182918716906349ad755b90604401602060405180830381865afa158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d9190612cda565b6040516349ad755b60e01b81526001600160a01b038581166004830152602482018890529192506000918816906349ad755b90604401602060405180830381865afa158015612060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120849190612cda565b905060008113612095576000612097565b805b600083136120a65760006120a8565b825b6120b29190612bde565b979650505050505050565b60008082600c8111156120d2576120d261287b565b036120df57506000919050565b600582600c8111156120f3576120f361287b565b0361210057506002919050565b600282600c8111156121145761211461287b565b0361212157506003919050565b506001919050565b919050565b6000828152600c602090815260408083206001600160a01b038516845290915290205460ff16610a7d576000828152600a602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b038716908117909155868552600c8452828520818652909352818420805460ff1916909117905551909184917fd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f9190a35050565b60006121ee87878787611f97565b60008781526008602052604090205490915082821015612223576122128284612c3a565b61221c9082612c3a565b905061223a565b61222d8383612c3a565b6122379082612bde565b90505b60008781526008602090815260409182902083905581518681529081018390526001600160a01b0380881692908916918a917fea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c910160405180910390a45050505050505050565b6001600160a01b0381163b61230e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108d2565b600080516020612f0d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612346836125fd565b6000825111806123535750805b15611347576109ab838361263d565b6000806123716006600a612dd7565b61237c906064612de3565b6123868587612de3565b6123909190612e35565b905080156124b45760055460408051634614be9f60e01b815290516000926001600160a01b031691637de182c5918391634614be9f9160048083019260209291908290030181865afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e9190612e02565b86856040518463ffffffff1660e01b815260040161242e93929190612e57565b60408051808303816000875af115801561244c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124709190612e7b565b91506000905081600c8111156124885761248861287b565b146124b25786612497826120bd565b60405163c27d271160e01b81526004016108d2929190612edc565b505b95945050505050565b60008215806124cc5750848410155b156124d957506000610cab565b6124e4600680612bde565b8260ff1610156125305760ff82166124fd600680612bde565b6125079190612c3a565b61251290600a612dd7565b61251c8587612c3a565b6125269085612de3565b611f579190612e35565b61253b600680612bde565b6125489060ff8416612c3a565b61255390600a612dd7565b61255d8587612c3a565b6125679085612de3565b611f579190612de3565b60008215806125805750848411155b1561258d57506000610cab565b612598600680612bde565b8260ff1610156125d05760ff82166125b1600680612bde565b6125bb9190612c3a565b6125c690600a612dd7565b61251c8686612c3a565b6125db600680612bde565b6125e89060ff8416612c3a565b6125f390600a612dd7565b61255d8686612c3a565b612606816122a1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606126628383604051806060016040528060278152602001612f2d60279139612669565b9392505050565b60606001600160a01b0384163b6126d15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016108d2565b600080856001600160a01b0316856040516126ec9190612ef0565b600060405180830381855af49150503d8060008114612727576040519150601f19603f3d011682016040523d82523d6000602084013e61272c565b606091505b509150915061273c828286612746565b9695505050505050565b60608315612755575081612662565b8251156127655782518084602001fd5b8160405162461bcd60e51b81526004016108d291906127dd565b6001600160a01b038116811461088757600080fd5b6000602082840312156127a657600080fd5b81356126628161277f565b60005b838110156127cc5781810151838201526020016127b4565b838111156109ab5750506000910152565b60208152600082518060208401526127fc8160408501602087016127b1565b601f01601f19169190910160400192915050565b6000806040838503121561282357600080fd5b50508035926020909101359150565b6000806040838503121561284557600080fd5b8235915060208301356128578161277f565b809150509250929050565b60006020828403121561287457600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106128a5576128a561287b565b91905290565b600080600080608085870312156128c157600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561290657600080fd5b82356129118161277f565b9150602083013567ffffffffffffffff8082111561292e57600080fd5b818501915085601f83011261294257600080fd5b813581811115612954576129546128dd565b604051601f8201601f19908116603f0116810190838211818310171561297c5761297c6128dd565b8160405282815288602084870101111561299557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156129ca57600080fd5b82356129d58161277f565b946020939093013593505050565b801515811461088757600080fd5b60008060408385031215612a0457600080fd5b8235612a0f8161277f565b91506020830135612857816129e3565b600080600080600060a08688031215612a3757600080fd5b853594506020860135612a498161277f565b93506040860135612a598161277f565b94979396509394606081013594506080013592915050565b600a8110612a8157612a8161287b565b9052565b8381526020810183905260608101610cab6040830184612a71565b600080600060608486031215612ab557600080fd5b8335612ac08161277f565b95602085013595506040909401359392505050565b60008082840360a0811215612ae957600080fd5b833592506080601f1982011215612aff57600080fd5b506020830190509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612bb757600080fd5b815160ff8116811461266257600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612bf157612bf1612bc8565b500190565b8051600d811061212957600080fd5b600080600060608486031215612c1a57600080fd5b8351925060208401519150612c3160408501612bf6565b90509250925092565b600082821015612c4c57612c4c612bc8565b500390565b8135612c5c8161277f565b81546001600160a01b031981166001600160a01b039290921691821783556020840135612c88816129e3565b6001600160a81b03199190911690911790151560a01b60ff60a01b1617815560408201356001820155606090910135600290910155565b600060208284031215612cd157600080fd5b61266282612bf6565b600060208284031215612cec57600080fd5b5051919050565b600181815b80851115612d2e578160001904821115612d1457612d14612bc8565b80851615612d2157918102915b93841c9390800290612cf8565b509250929050565b600082612d4557506001610d2d565b81612d5257506000610d2d565b8160018114612d685760028114612d7257612d8e565b6001915050610d2d565b60ff841115612d8357612d83612bc8565b50506001821b610d2d565b5060208310610133831016604e8410600b8410161715612db1575081810a610d2d565b612dbb8383612cf3565b8060001904821115612dcf57612dcf612bc8565b029392505050565b60006126628383612d36565b6000816000190483118215151615612dfd57612dfd612bc8565b500290565b600060208284031215612e1457600080fd5b81516126628161277f565b634e487b7160e01b600052603260045260246000fd5b600082612e5257634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60008060408385031215612e8e57600080fd5b82519150612e9e60208401612bf6565b90509250929050565b6000600160ff1b8201612ebc57612ebc612bc8565b5060000390565b600060018201612ed557612ed5612bc8565b5060010190565b828152604081016126626020830184612a71565b60008251612f028184602087016127b1565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080f000a",
}

// InstrumentsABI is the input ABI used to generate the binding from.
// Deprecated: Use InstrumentsMetaData.ABI instead.
var InstrumentsABI = InstrumentsMetaData.ABI

// InstrumentsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InstrumentsMetaData.Bin instead.
var InstrumentsBin = InstrumentsMetaData.Bin

// DeployInstruments deploys a new Ethereum contract, binding an instance of Instruments to it.
func DeployInstruments(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Instruments, error) {
	parsed, err := InstrumentsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InstrumentsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Instruments{InstrumentsCaller: InstrumentsCaller{contract: contract}, InstrumentsTransactor: InstrumentsTransactor{contract: contract}, InstrumentsFilterer: InstrumentsFilterer{contract: contract}}, nil
}

// Instruments is an auto generated Go binding around an Ethereum contract.
type Instruments struct {
	InstrumentsCaller     // Read-only binding to the contract
	InstrumentsTransactor // Write-only binding to the contract
	InstrumentsFilterer   // Log filterer for contract events
}

// InstrumentsCaller is an auto generated read-only Go binding around an Ethereum contract.
type InstrumentsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InstrumentsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InstrumentsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstrumentsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InstrumentsSession struct {
	Contract     *Instruments      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InstrumentsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InstrumentsCallerSession struct {
	Contract *InstrumentsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// InstrumentsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InstrumentsTransactorSession struct {
	Contract     *InstrumentsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// InstrumentsRaw is an auto generated low-level Go binding around an Ethereum contract.
type InstrumentsRaw struct {
	Contract *Instruments // Generic contract binding to access the raw methods on
}

// InstrumentsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InstrumentsCallerRaw struct {
	Contract *InstrumentsCaller // Generic read-only contract binding to access the raw methods on
}

// InstrumentsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InstrumentsTransactorRaw struct {
	Contract *InstrumentsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInstruments creates a new instance of Instruments, bound to a specific deployed contract.
func NewInstruments(address common.Address, backend bind.ContractBackend) (*Instruments, error) {
	contract, err := bindInstruments(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Instruments{InstrumentsCaller: InstrumentsCaller{contract: contract}, InstrumentsTransactor: InstrumentsTransactor{contract: contract}, InstrumentsFilterer: InstrumentsFilterer{contract: contract}}, nil
}

// NewInstrumentsCaller creates a new read-only instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsCaller(address common.Address, caller bind.ContractCaller) (*InstrumentsCaller, error) {
	contract, err := bindInstruments(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InstrumentsCaller{contract: contract}, nil
}

// NewInstrumentsTransactor creates a new write-only instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsTransactor(address common.Address, transactor bind.ContractTransactor) (*InstrumentsTransactor, error) {
	contract, err := bindInstruments(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InstrumentsTransactor{contract: contract}, nil
}

// NewInstrumentsFilterer creates a new log filterer instance of Instruments, bound to a specific deployed contract.
func NewInstrumentsFilterer(address common.Address, filterer bind.ContractFilterer) (*InstrumentsFilterer, error) {
	contract, err := bindInstruments(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InstrumentsFilterer{contract: contract}, nil
}

// bindInstruments binds a generic wrapper to an already deployed contract.
func bindInstruments(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InstrumentsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Instruments *InstrumentsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Instruments.Contract.InstrumentsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Instruments *InstrumentsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Instruments.Contract.InstrumentsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Instruments *InstrumentsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Instruments.Contract.InstrumentsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Instruments *InstrumentsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Instruments.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Instruments *InstrumentsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Instruments.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Instruments *InstrumentsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Instruments.Contract.contract.Transact(opts, method, params...)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsCaller) Accounts(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "accounts")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsSession) Accounts() (common.Address, error) {
	return _Instruments.Contract.Accounts(&_Instruments.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Instruments *InstrumentsCallerSession) Accounts() (common.Address, error) {
	return _Instruments.Contract.Accounts(&_Instruments.CallOpts)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsCaller) Authorities(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "authorities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsSession) Authorities(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Authorities(&_Instruments.CallOpts, arg0)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Authorities(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Authorities(&_Instruments.CallOpts, arg0)
}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsCaller) DisputePeriod(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "disputePeriod", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsSession) DisputePeriod(arg0 common.Address) (*big.Int, error) {
	return _Instruments.Contract.DisputePeriod(&_Instruments.CallOpts, arg0)
}

// DisputePeriod is a free data retrieval call binding the contract method 0x059f6b07.
//
// Solidity: function disputePeriod(address ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) DisputePeriod(arg0 common.Address) (*big.Int, error) {
	return _Instruments.Contract.DisputePeriod(&_Instruments.CallOpts, arg0)
}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsCaller) ExpiryPrice(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "expiryPrice", arg0, arg1)

	outstruct := new(struct {
		Price     *big.Int
		Timestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Price = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsSession) ExpiryPrice(arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	return _Instruments.Contract.ExpiryPrice(&_Instruments.CallOpts, arg0, arg1)
}

// ExpiryPrice is a free data retrieval call binding the contract method 0xdee52b64.
//
// Solidity: function expiryPrice(address , uint256 ) view returns(uint256 price, uint256 timestamp)
func (_Instruments *InstrumentsCallerSession) ExpiryPrice(arg0 common.Address, arg1 *big.Int) (struct {
	Price     *big.Int
	Timestamp *big.Int
}, error) {
	return _Instruments.Contract.ExpiryPrice(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCaller) InstrumentAccounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccounts", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsSession) InstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.InstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccounts is a free data retrieval call binding the contract method 0x19b57f9b.
//
// Solidity: function instrumentAccounts(uint256 , address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) InstrumentAccounts(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Instruments.Contract.InstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccountsArray is a free data retrieval call binding the contract method 0x0c6caff8.
//
// Solidity: function instrumentAccountsArray(uint256 , uint256 ) view returns(address)
func (_Instruments *InstrumentsCaller) InstrumentAccountsArray(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccountsArray", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InstrumentAccountsArray is a free data retrieval call binding the contract method 0x0c6caff8.
//
// Solidity: function instrumentAccountsArray(uint256 , uint256 ) view returns(address)
func (_Instruments *InstrumentsSession) InstrumentAccountsArray(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Instruments.Contract.InstrumentAccountsArray(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccountsArray is a free data retrieval call binding the contract method 0x0c6caff8.
//
// Solidity: function instrumentAccountsArray(uint256 , uint256 ) view returns(address)
func (_Instruments *InstrumentsCallerSession) InstrumentAccountsArray(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Instruments.Contract.InstrumentAccountsArray(&_Instruments.CallOpts, arg0, arg1)
}

// InstrumentAccountsSize is a free data retrieval call binding the contract method 0xc1ece4dd.
//
// Solidity: function instrumentAccountsSize(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCaller) InstrumentAccountsSize(opts *bind.CallOpts, instrumentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instrumentAccountsSize", instrumentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InstrumentAccountsSize is a free data retrieval call binding the contract method 0xc1ece4dd.
//
// Solidity: function instrumentAccountsSize(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsSession) InstrumentAccountsSize(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.InstrumentAccountsSize(&_Instruments.CallOpts, instrumentId)
}

// InstrumentAccountsSize is a free data retrieval call binding the contract method 0xc1ece4dd.
//
// Solidity: function instrumentAccountsSize(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) InstrumentAccountsSize(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.InstrumentAccountsSize(&_Instruments.CallOpts, instrumentId)
}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsCaller) Instruments(opts *bind.CallOpts, arg0 *big.Int) (uint8, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "instruments", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsSession) Instruments(arg0 *big.Int) (uint8, error) {
	return _Instruments.Contract.Instruments(&_Instruments.CallOpts, arg0)
}

// Instruments is a free data retrieval call binding the contract method 0x22bbad0b.
//
// Solidity: function instruments(uint256 ) view returns(uint8)
func (_Instruments *InstrumentsCallerSession) Instruments(arg0 *big.Int) (uint8, error) {
	return _Instruments.Contract.Instruments(&_Instruments.CallOpts, arg0)
}

// IsDisputePeriodOver is a free data retrieval call binding the contract method 0x5fdc7149.
//
// Solidity: function isDisputePeriodOver(address _asset, uint256 _expiry) view returns(bool)
func (_Instruments *InstrumentsCaller) IsDisputePeriodOver(opts *bind.CallOpts, _asset common.Address, _expiry *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "isDisputePeriodOver", _asset, _expiry)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDisputePeriodOver is a free data retrieval call binding the contract method 0x5fdc7149.
//
// Solidity: function isDisputePeriodOver(address _asset, uint256 _expiry) view returns(bool)
func (_Instruments *InstrumentsSession) IsDisputePeriodOver(_asset common.Address, _expiry *big.Int) (bool, error) {
	return _Instruments.Contract.IsDisputePeriodOver(&_Instruments.CallOpts, _asset, _expiry)
}

// IsDisputePeriodOver is a free data retrieval call binding the contract method 0x5fdc7149.
//
// Solidity: function isDisputePeriodOver(address _asset, uint256 _expiry) view returns(bool)
func (_Instruments *InstrumentsCallerSession) IsDisputePeriodOver(_asset common.Address, _expiry *big.Int) (bool, error) {
	return _Instruments.Contract.IsDisputePeriodOver(&_Instruments.CallOpts, _asset, _expiry)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsCaller) Keepers(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "keepers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsSession) Keepers(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Keepers(&_Instruments.CallOpts, arg0)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Keepers(arg0 common.Address) (bool, error) {
	return _Instruments.Contract.Keepers(&_Instruments.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsSession) Name() (string, error) {
	return _Instruments.Contract.Name(&_Instruments.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Instruments *InstrumentsCallerSession) Name() (string, error) {
	return _Instruments.Contract.Name(&_Instruments.CallOpts)
}

// NumSettledAccounts is a free data retrieval call binding the contract method 0x484fd4e1.
//
// Solidity: function numSettledAccounts(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCaller) NumSettledAccounts(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "numSettledAccounts", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumSettledAccounts is a free data retrieval call binding the contract method 0x484fd4e1.
//
// Solidity: function numSettledAccounts(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsSession) NumSettledAccounts(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.NumSettledAccounts(&_Instruments.CallOpts, arg0)
}

// NumSettledAccounts is a free data retrieval call binding the contract method 0x484fd4e1.
//
// Solidity: function numSettledAccounts(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) NumSettledAccounts(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.NumSettledAccounts(&_Instruments.CallOpts, arg0)
}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCaller) OpenInterest(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "openInterest", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsSession) OpenInterest(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.OpenInterest(&_Instruments.CallOpts, arg0)
}

// OpenInterest is a free data retrieval call binding the contract method 0x88e53ec8.
//
// Solidity: function openInterest(uint256 ) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) OpenInterest(arg0 *big.Int) (*big.Int, error) {
	return _Instruments.Contract.OpenInterest(&_Instruments.CallOpts, arg0)
}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsCaller) Options(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "options", arg0)

	outstruct := new(struct {
		Asset  common.Address
		IsPut  bool
		Strike *big.Int
		Expiry *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Asset = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.IsPut = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.Strike = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Expiry = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsSession) Options(arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	return _Instruments.Contract.Options(&_Instruments.CallOpts, arg0)
}

// Options is a free data retrieval call binding the contract method 0x409e2205.
//
// Solidity: function options(uint256 ) view returns(address asset, bool isPut, uint256 strike, uint256 expiry)
func (_Instruments *InstrumentsCallerSession) Options(arg0 *big.Int) (struct {
	Asset  common.Address
	IsPut  bool
	Strike *big.Int
	Expiry *big.Int
}, error) {
	return _Instruments.Contract.Options(&_Instruments.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsSession) Owner() (common.Address, error) {
	return _Instruments.Contract.Owner(&_Instruments.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Instruments *InstrumentsCallerSession) Owner() (common.Address, error) {
	return _Instruments.Contract.Owner(&_Instruments.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsSession) ProxiableUUID() ([32]byte, error) {
	return _Instruments.Contract.ProxiableUUID(&_Instruments.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Instruments *InstrumentsCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Instruments.Contract.ProxiableUUID(&_Instruments.CallOpts)
}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) Settled(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) Settled(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settled(&_Instruments.CallOpts, arg0)
}

// Settled is a free data retrieval call binding the contract method 0x28345780.
//
// Solidity: function settled(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Settled(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settled(&_Instruments.CallOpts, arg0)
}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0x1648bb43.
//
// Solidity: function settledInstrumentAccounts(uint256 , uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) SettledInstrumentAccounts(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settledInstrumentAccounts", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0x1648bb43.
//
// Solidity: function settledInstrumentAccounts(uint256 , uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) SettledInstrumentAccounts(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Instruments.Contract.SettledInstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// SettledInstrumentAccounts is a free data retrieval call binding the contract method 0x1648bb43.
//
// Solidity: function settledInstrumentAccounts(uint256 , uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) SettledInstrumentAccounts(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Instruments.Contract.SettledInstrumentAccounts(&_Instruments.CallOpts, arg0, arg1)
}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCaller) Settling(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "settling", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsSession) Settling(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settling(&_Instruments.CallOpts, arg0)
}

// Settling is a free data retrieval call binding the contract method 0xc7f9df8b.
//
// Solidity: function settling(uint256 ) view returns(bool)
func (_Instruments *InstrumentsCallerSession) Settling(arg0 *big.Int) (bool, error) {
	return _Instruments.Contract.Settling(&_Instruments.CallOpts, arg0)
}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCaller) TotalOptionPayout(opts *bind.CallOpts, instrumentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Instruments.contract.Call(opts, &out, "totalOptionPayout", instrumentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsSession) TotalOptionPayout(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.TotalOptionPayout(&_Instruments.CallOpts, instrumentId)
}

// TotalOptionPayout is a free data retrieval call binding the contract method 0x5af9ac0a.
//
// Solidity: function totalOptionPayout(uint256 instrumentId) view returns(uint256)
func (_Instruments *InstrumentsCallerSession) TotalOptionPayout(instrumentId *big.Int) (*big.Int, error) {
	return _Instruments.Contract.TotalOptionPayout(&_Instruments.CallOpts, instrumentId)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsTransactor) AddOption(opts *bind.TransactOpts, instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "addOption", instrument, option)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsSession) AddOption(instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.Contract.AddOption(&_Instruments.TransactOpts, instrument, option)
}

// AddOption is a paid mutator transaction binding the contract method 0xe6a97e44.
//
// Solidity: function addOption(uint256 instrument, (address,bool,uint256,uint256) option) returns()
func (_Instruments *InstrumentsTransactorSession) AddOption(instrument *big.Int, option OptionsOption) (*types.Transaction, error) {
	return _Instruments.Contract.AddOption(&_Instruments.TransactOpts, instrument, option)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "initialize", _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.Initialize(&_Instruments.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Instruments *InstrumentsTransactorSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.Initialize(&_Instruments.TransactOpts, _owner)
}

// OverrideExpiryPrice is a paid mutator transaction binding the contract method 0xbda9e302.
//
// Solidity: function overrideExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsTransactor) OverrideExpiryPrice(opts *bind.TransactOpts, asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "overrideExpiryPrice", asset, expiry, price)
}

// OverrideExpiryPrice is a paid mutator transaction binding the contract method 0xbda9e302.
//
// Solidity: function overrideExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsSession) OverrideExpiryPrice(asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.OverrideExpiryPrice(&_Instruments.TransactOpts, asset, expiry, price)
}

// OverrideExpiryPrice is a paid mutator transaction binding the contract method 0xbda9e302.
//
// Solidity: function overrideExpiryPrice(address asset, uint256 expiry, uint256 price) returns()
func (_Instruments *InstrumentsTransactorSession) OverrideExpiryPrice(asset common.Address, expiry *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.OverrideExpiryPrice(&_Instruments.TransactOpts, asset, expiry, price)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsTransactor) SetAccounts(opts *bind.TransactOpts, _accounts common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setAccounts", _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetAccounts(&_Instruments.TransactOpts, _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Instruments *InstrumentsTransactorSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetAccounts(&_Instruments.TransactOpts, _accounts)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address asset, uint256 period) returns()
func (_Instruments *InstrumentsTransactor) SetDisputePeriod(opts *bind.TransactOpts, asset common.Address, period *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setDisputePeriod", asset, period)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address asset, uint256 period) returns()
func (_Instruments *InstrumentsSession) SetDisputePeriod(asset common.Address, period *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetDisputePeriod(&_Instruments.TransactOpts, asset, period)
}

// SetDisputePeriod is a paid mutator transaction binding the contract method 0x8b3cddaf.
//
// Solidity: function setDisputePeriod(address asset, uint256 period) returns()
func (_Instruments *InstrumentsTransactorSession) SetDisputePeriod(asset common.Address, period *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetDisputePeriod(&_Instruments.TransactOpts, asset, period)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address _asset, uint256 _expiry, uint256 _expiryPrice) returns()
func (_Instruments *InstrumentsTransactor) SetExpiryPrice(opts *bind.TransactOpts, _asset common.Address, _expiry *big.Int, _expiryPrice *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setExpiryPrice", _asset, _expiry, _expiryPrice)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address _asset, uint256 _expiry, uint256 _expiryPrice) returns()
func (_Instruments *InstrumentsSession) SetExpiryPrice(_asset common.Address, _expiry *big.Int, _expiryPrice *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetExpiryPrice(&_Instruments.TransactOpts, _asset, _expiry, _expiryPrice)
}

// SetExpiryPrice is a paid mutator transaction binding the contract method 0xee531409.
//
// Solidity: function setExpiryPrice(address _asset, uint256 _expiry, uint256 _expiryPrice) returns()
func (_Instruments *InstrumentsTransactorSession) SetExpiryPrice(_asset common.Address, _expiry *big.Int, _expiryPrice *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SetExpiryPrice(&_Instruments.TransactOpts, _asset, _expiry, _expiryPrice)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetOwner(&_Instruments.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Instruments *InstrumentsTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.SetOwner(&_Instruments.TransactOpts, newOwner)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactor) SettleOption(opts *bind.TransactOpts, instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "settleOption", instrumentId, start, end, settlementFee)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsSession) SettleOption(instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption(&_Instruments.TransactOpts, instrumentId, start, end, settlementFee)
}

// SettleOption is a paid mutator transaction binding the contract method 0x432a4e7d.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 start, uint256 end, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactorSession) SettleOption(instrumentId *big.Int, start *big.Int, end *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption(&_Instruments.TransactOpts, instrumentId, start, end, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactor) SettleOption0(opts *bind.TransactOpts, instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "settleOption0", instrumentId, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsSession) SettleOption0(instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption0(&_Instruments.TransactOpts, instrumentId, settlementFee)
}

// SettleOption0 is a paid mutator transaction binding the contract method 0x9d5bb5c0.
//
// Solidity: function settleOption(uint256 instrumentId, uint256 settlementFee) returns()
func (_Instruments *InstrumentsTransactorSession) SettleOption0(instrumentId *big.Int, settlementFee *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.SettleOption0(&_Instruments.TransactOpts, instrumentId, settlementFee)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0x991f94a0.
//
// Solidity: function transferInstrument(uint256 instrument, address from, address to, uint256 amount, uint256 price) returns(int256, int256, uint8)
func (_Instruments *InstrumentsTransactor) TransferInstrument(opts *bind.TransactOpts, instrument *big.Int, from common.Address, to common.Address, amount *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "transferInstrument", instrument, from, to, amount, price)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0x991f94a0.
//
// Solidity: function transferInstrument(uint256 instrument, address from, address to, uint256 amount, uint256 price) returns(int256, int256, uint8)
func (_Instruments *InstrumentsSession) TransferInstrument(instrument *big.Int, from common.Address, to common.Address, amount *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.TransferInstrument(&_Instruments.TransactOpts, instrument, from, to, amount, price)
}

// TransferInstrument is a paid mutator transaction binding the contract method 0x991f94a0.
//
// Solidity: function transferInstrument(uint256 instrument, address from, address to, uint256 amount, uint256 price) returns(int256, int256, uint8)
func (_Instruments *InstrumentsTransactorSession) TransferInstrument(instrument *big.Int, from common.Address, to common.Address, amount *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Instruments.Contract.TransferInstrument(&_Instruments.TransactOpts, instrument, from, to, amount, price)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsTransactor) UpdateAuthority(opts *bind.TransactOpts, authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "updateAuthority", authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateAuthority(&_Instruments.TransactOpts, authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Instruments *InstrumentsTransactorSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateAuthority(&_Instruments.TransactOpts, authority, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsTransactor) UpdateKeeper(opts *bind.TransactOpts, keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "updateKeeper", keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateKeeper(&_Instruments.TransactOpts, keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Instruments *InstrumentsTransactorSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Instruments.Contract.UpdateKeeper(&_Instruments.TransactOpts, keeper, allowed)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeTo(&_Instruments.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Instruments *InstrumentsTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeTo(&_Instruments.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeToAndCall(&_Instruments.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Instruments *InstrumentsTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Instruments.Contract.UpgradeToAndCall(&_Instruments.TransactOpts, newImplementation, data)
}

// InstrumentsAccountsUpdatedIterator is returned from FilterAccountsUpdated and is used to iterate over the raw logs and unpacked data for AccountsUpdated events raised by the Instruments contract.
type InstrumentsAccountsUpdatedIterator struct {
	Event *InstrumentsAccountsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAccountsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAccountsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAccountsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAccountsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAccountsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAccountsUpdated represents a AccountsUpdated event raised by the Instruments contract.
type InstrumentsAccountsUpdated struct {
	Accounts common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAccountsUpdated is a free log retrieval operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) FilterAccountsUpdated(opts *bind.FilterOpts, accounts []common.Address) (*InstrumentsAccountsUpdatedIterator, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsAccountsUpdatedIterator{contract: _Instruments.contract, event: "AccountsUpdated", logs: logs, sub: sub}, nil
}

// WatchAccountsUpdated is a free log subscription operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) WatchAccountsUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsAccountsUpdated, accounts []common.Address) (event.Subscription, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAccountsUpdated)
				if err := _Instruments.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountsUpdated is a log parse operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Instruments *InstrumentsFilterer) ParseAccountsUpdated(log types.Log) (*InstrumentsAccountsUpdated, error) {
	event := new(InstrumentsAccountsUpdated)
	if err := _Instruments.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Instruments contract.
type InstrumentsAdminChangedIterator struct {
	Event *InstrumentsAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAdminChanged represents a AdminChanged event raised by the Instruments contract.
type InstrumentsAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*InstrumentsAdminChangedIterator, error) {

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &InstrumentsAdminChangedIterator{contract: _Instruments.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *InstrumentsAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAdminChanged)
				if err := _Instruments.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Instruments *InstrumentsFilterer) ParseAdminChanged(log types.Log) (*InstrumentsAdminChanged, error) {
	event := new(InstrumentsAdminChanged)
	if err := _Instruments.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsAuthorityUpdatedIterator is returned from FilterAuthorityUpdated and is used to iterate over the raw logs and unpacked data for AuthorityUpdated events raised by the Instruments contract.
type InstrumentsAuthorityUpdatedIterator struct {
	Event *InstrumentsAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsAuthorityUpdated represents a AuthorityUpdated event raised by the Instruments contract.
type InstrumentsAuthorityUpdated struct {
	Authority common.Address
	Allowed   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuthorityUpdated is a free log retrieval operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) FilterAuthorityUpdated(opts *bind.FilterOpts, authority []common.Address, allowed []bool) (*InstrumentsAuthorityUpdatedIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsAuthorityUpdatedIterator{contract: _Instruments.contract, event: "AuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorityUpdated is a free log subscription operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) WatchAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsAuthorityUpdated, authority []common.Address, allowed []bool) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsAuthorityUpdated)
				if err := _Instruments.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityUpdated is a log parse operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) ParseAuthorityUpdated(log types.Log) (*InstrumentsAuthorityUpdated, error) {
	event := new(InstrumentsAuthorityUpdated)
	if err := _Instruments.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Instruments contract.
type InstrumentsBeaconUpgradedIterator struct {
	Event *InstrumentsBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsBeaconUpgraded represents a BeaconUpgraded event raised by the Instruments contract.
type InstrumentsBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*InstrumentsBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsBeaconUpgradedIterator{contract: _Instruments.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *InstrumentsBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsBeaconUpgraded)
				if err := _Instruments.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Instruments *InstrumentsFilterer) ParseBeaconUpgraded(log types.Log) (*InstrumentsBeaconUpgraded, error) {
	event := new(InstrumentsBeaconUpgraded)
	if err := _Instruments.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsDisputePeriodUpdatedIterator is returned from FilterDisputePeriodUpdated and is used to iterate over the raw logs and unpacked data for DisputePeriodUpdated events raised by the Instruments contract.
type InstrumentsDisputePeriodUpdatedIterator struct {
	Event *InstrumentsDisputePeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsDisputePeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsDisputePeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsDisputePeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsDisputePeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsDisputePeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsDisputePeriodUpdated represents a DisputePeriodUpdated event raised by the Instruments contract.
type InstrumentsDisputePeriodUpdated struct {
	Asset  common.Address
	Period *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDisputePeriodUpdated is a free log retrieval operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed period)
func (_Instruments *InstrumentsFilterer) FilterDisputePeriodUpdated(opts *bind.FilterOpts, asset []common.Address, period []*big.Int) (*InstrumentsDisputePeriodUpdatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var periodRule []interface{}
	for _, periodItem := range period {
		periodRule = append(periodRule, periodItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "DisputePeriodUpdated", assetRule, periodRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsDisputePeriodUpdatedIterator{contract: _Instruments.contract, event: "DisputePeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchDisputePeriodUpdated is a free log subscription operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed period)
func (_Instruments *InstrumentsFilterer) WatchDisputePeriodUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsDisputePeriodUpdated, asset []common.Address, period []*big.Int) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var periodRule []interface{}
	for _, periodItem := range period {
		periodRule = append(periodRule, periodItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "DisputePeriodUpdated", assetRule, periodRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsDisputePeriodUpdated)
				if err := _Instruments.contract.UnpackLog(event, "DisputePeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputePeriodUpdated is a log parse operation binding the contract event 0x6650c9b75cf9b0e48611d4e590a8bd06f11be77c6b005b76114d42955d95e3a7.
//
// Solidity: event DisputePeriodUpdated(address indexed asset, uint256 indexed period)
func (_Instruments *InstrumentsFilterer) ParseDisputePeriodUpdated(log types.Log) (*InstrumentsDisputePeriodUpdated, error) {
	event := new(InstrumentsDisputePeriodUpdated)
	if err := _Instruments.contract.UnpackLog(event, "DisputePeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsExpiryPriceSetIterator is returned from FilterExpiryPriceSet and is used to iterate over the raw logs and unpacked data for ExpiryPriceSet events raised by the Instruments contract.
type InstrumentsExpiryPriceSetIterator struct {
	Event *InstrumentsExpiryPriceSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsExpiryPriceSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsExpiryPriceSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsExpiryPriceSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsExpiryPriceSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsExpiryPriceSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsExpiryPriceSet represents a ExpiryPriceSet event raised by the Instruments contract.
type InstrumentsExpiryPriceSet struct {
	Asset  common.Address
	Expiry *big.Int
	Price  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExpiryPriceSet is a free log retrieval operation binding the contract event 0x8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7.
//
// Solidity: event ExpiryPriceSet(address indexed asset, uint256 indexed expiry, uint256 price)
func (_Instruments *InstrumentsFilterer) FilterExpiryPriceSet(opts *bind.FilterOpts, asset []common.Address, expiry []*big.Int) (*InstrumentsExpiryPriceSetIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "ExpiryPriceSet", assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsExpiryPriceSetIterator{contract: _Instruments.contract, event: "ExpiryPriceSet", logs: logs, sub: sub}, nil
}

// WatchExpiryPriceSet is a free log subscription operation binding the contract event 0x8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7.
//
// Solidity: event ExpiryPriceSet(address indexed asset, uint256 indexed expiry, uint256 price)
func (_Instruments *InstrumentsFilterer) WatchExpiryPriceSet(opts *bind.WatchOpts, sink chan<- *InstrumentsExpiryPriceSet, asset []common.Address, expiry []*big.Int) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "ExpiryPriceSet", assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsExpiryPriceSet)
				if err := _Instruments.contract.UnpackLog(event, "ExpiryPriceSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExpiryPriceSet is a log parse operation binding the contract event 0x8cc2700c35138467f8087f0f5101b52a163c8554838ef019be2546e67eebb9c7.
//
// Solidity: event ExpiryPriceSet(address indexed asset, uint256 indexed expiry, uint256 price)
func (_Instruments *InstrumentsFilterer) ParseExpiryPriceSet(log types.Log) (*InstrumentsExpiryPriceSet, error) {
	event := new(InstrumentsExpiryPriceSet)
	if err := _Instruments.contract.UnpackLog(event, "ExpiryPriceSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsInstrumentAccountAddedIterator is returned from FilterInstrumentAccountAdded and is used to iterate over the raw logs and unpacked data for InstrumentAccountAdded events raised by the Instruments contract.
type InstrumentsInstrumentAccountAddedIterator struct {
	Event *InstrumentsInstrumentAccountAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsInstrumentAccountAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsInstrumentAccountAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsInstrumentAccountAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsInstrumentAccountAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsInstrumentAccountAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsInstrumentAccountAdded represents a InstrumentAccountAdded event raised by the Instruments contract.
type InstrumentsInstrumentAccountAdded struct {
	Instrument *big.Int
	Account    common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInstrumentAccountAdded is a free log retrieval operation binding the contract event 0xd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f.
//
// Solidity: event InstrumentAccountAdded(uint256 indexed instrument, address indexed account)
func (_Instruments *InstrumentsFilterer) FilterInstrumentAccountAdded(opts *bind.FilterOpts, instrument []*big.Int, account []common.Address) (*InstrumentsInstrumentAccountAddedIterator, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "InstrumentAccountAdded", instrumentRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsInstrumentAccountAddedIterator{contract: _Instruments.contract, event: "InstrumentAccountAdded", logs: logs, sub: sub}, nil
}

// WatchInstrumentAccountAdded is a free log subscription operation binding the contract event 0xd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f.
//
// Solidity: event InstrumentAccountAdded(uint256 indexed instrument, address indexed account)
func (_Instruments *InstrumentsFilterer) WatchInstrumentAccountAdded(opts *bind.WatchOpts, sink chan<- *InstrumentsInstrumentAccountAdded, instrument []*big.Int, account []common.Address) (event.Subscription, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "InstrumentAccountAdded", instrumentRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsInstrumentAccountAdded)
				if err := _Instruments.contract.UnpackLog(event, "InstrumentAccountAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstrumentAccountAdded is a log parse operation binding the contract event 0xd56cbb684c2af0cb6004dfc76579372e9989c539a6140d9622ab4e4264f1f75f.
//
// Solidity: event InstrumentAccountAdded(uint256 indexed instrument, address indexed account)
func (_Instruments *InstrumentsFilterer) ParseInstrumentAccountAdded(log types.Log) (*InstrumentsInstrumentAccountAdded, error) {
	event := new(InstrumentsInstrumentAccountAdded)
	if err := _Instruments.contract.UnpackLog(event, "InstrumentAccountAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsInstrumentTransferredIterator is returned from FilterInstrumentTransferred and is used to iterate over the raw logs and unpacked data for InstrumentTransferred events raised by the Instruments contract.
type InstrumentsInstrumentTransferredIterator struct {
	Event *InstrumentsInstrumentTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsInstrumentTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsInstrumentTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsInstrumentTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsInstrumentTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsInstrumentTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsInstrumentTransferred represents a InstrumentTransferred event raised by the Instruments contract.
type InstrumentsInstrumentTransferred struct {
	Instrument   *big.Int
	From         common.Address
	To           common.Address
	Amount       *big.Int
	OpenInterest *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterInstrumentTransferred is a free log retrieval operation binding the contract event 0xea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c.
//
// Solidity: event InstrumentTransferred(uint256 indexed instrument, address indexed from, address indexed to, uint256 amount, uint256 openInterest)
func (_Instruments *InstrumentsFilterer) FilterInstrumentTransferred(opts *bind.FilterOpts, instrument []*big.Int, from []common.Address, to []common.Address) (*InstrumentsInstrumentTransferredIterator, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "InstrumentTransferred", instrumentRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsInstrumentTransferredIterator{contract: _Instruments.contract, event: "InstrumentTransferred", logs: logs, sub: sub}, nil
}

// WatchInstrumentTransferred is a free log subscription operation binding the contract event 0xea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c.
//
// Solidity: event InstrumentTransferred(uint256 indexed instrument, address indexed from, address indexed to, uint256 amount, uint256 openInterest)
func (_Instruments *InstrumentsFilterer) WatchInstrumentTransferred(opts *bind.WatchOpts, sink chan<- *InstrumentsInstrumentTransferred, instrument []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "InstrumentTransferred", instrumentRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsInstrumentTransferred)
				if err := _Instruments.contract.UnpackLog(event, "InstrumentTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstrumentTransferred is a log parse operation binding the contract event 0xea4600feed794ec67dfe54a044b2501a9ec05001c578ee10a1f347d26d8ef46c.
//
// Solidity: event InstrumentTransferred(uint256 indexed instrument, address indexed from, address indexed to, uint256 amount, uint256 openInterest)
func (_Instruments *InstrumentsFilterer) ParseInstrumentTransferred(log types.Log) (*InstrumentsInstrumentTransferred, error) {
	event := new(InstrumentsInstrumentTransferred)
	if err := _Instruments.contract.UnpackLog(event, "InstrumentTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsKeeperUpdatedIterator is returned from FilterKeeperUpdated and is used to iterate over the raw logs and unpacked data for KeeperUpdated events raised by the Instruments contract.
type InstrumentsKeeperUpdatedIterator struct {
	Event *InstrumentsKeeperUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsKeeperUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsKeeperUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsKeeperUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsKeeperUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsKeeperUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsKeeperUpdated represents a KeeperUpdated event raised by the Instruments contract.
type InstrumentsKeeperUpdated struct {
	Keeper  common.Address
	Allowed bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeeperUpdated is a free log retrieval operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) FilterKeeperUpdated(opts *bind.FilterOpts, keeper []common.Address, allowed []bool) (*InstrumentsKeeperUpdatedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsKeeperUpdatedIterator{contract: _Instruments.contract, event: "KeeperUpdated", logs: logs, sub: sub}, nil
}

// WatchKeeperUpdated is a free log subscription operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) WatchKeeperUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsKeeperUpdated, keeper []common.Address, allowed []bool) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsKeeperUpdated)
				if err := _Instruments.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeeperUpdated is a log parse operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Instruments *InstrumentsFilterer) ParseKeeperUpdated(log types.Log) (*InstrumentsKeeperUpdated, error) {
	event := new(InstrumentsKeeperUpdated)
	if err := _Instruments.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsOptionAddedIterator is returned from FilterOptionAdded and is used to iterate over the raw logs and unpacked data for OptionAdded events raised by the Instruments contract.
type InstrumentsOptionAddedIterator struct {
	Event *InstrumentsOptionAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsOptionAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsOptionAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsOptionAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsOptionAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsOptionAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsOptionAdded represents a OptionAdded event raised by the Instruments contract.
type InstrumentsOptionAdded struct {
	Instrument *big.Int
	Asset      common.Address
	Expiry     *big.Int
	IsPut      bool
	Strike     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOptionAdded is a free log retrieval operation binding the contract event 0x8a3e5ee639fc2822a7d3969b04dabf44aa1249f1565d8b09b4940c64a1fa24d6.
//
// Solidity: event OptionAdded(uint256 indexed instrument, address indexed asset, uint256 indexed expiry, bool isPut, uint256 strike)
func (_Instruments *InstrumentsFilterer) FilterOptionAdded(opts *bind.FilterOpts, instrument []*big.Int, asset []common.Address, expiry []*big.Int) (*InstrumentsOptionAddedIterator, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "OptionAdded", instrumentRule, assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsOptionAddedIterator{contract: _Instruments.contract, event: "OptionAdded", logs: logs, sub: sub}, nil
}

// WatchOptionAdded is a free log subscription operation binding the contract event 0x8a3e5ee639fc2822a7d3969b04dabf44aa1249f1565d8b09b4940c64a1fa24d6.
//
// Solidity: event OptionAdded(uint256 indexed instrument, address indexed asset, uint256 indexed expiry, bool isPut, uint256 strike)
func (_Instruments *InstrumentsFilterer) WatchOptionAdded(opts *bind.WatchOpts, sink chan<- *InstrumentsOptionAdded, instrument []*big.Int, asset []common.Address, expiry []*big.Int) (event.Subscription, error) {

	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var expiryRule []interface{}
	for _, expiryItem := range expiry {
		expiryRule = append(expiryRule, expiryItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "OptionAdded", instrumentRule, assetRule, expiryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsOptionAdded)
				if err := _Instruments.contract.UnpackLog(event, "OptionAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptionAdded is a log parse operation binding the contract event 0x8a3e5ee639fc2822a7d3969b04dabf44aa1249f1565d8b09b4940c64a1fa24d6.
//
// Solidity: event OptionAdded(uint256 indexed instrument, address indexed asset, uint256 indexed expiry, bool isPut, uint256 strike)
func (_Instruments *InstrumentsFilterer) ParseOptionAdded(log types.Log) (*InstrumentsOptionAdded, error) {
	event := new(InstrumentsOptionAdded)
	if err := _Instruments.contract.UnpackLog(event, "OptionAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsOwnerUpdatedIterator is returned from FilterOwnerUpdated and is used to iterate over the raw logs and unpacked data for OwnerUpdated events raised by the Instruments contract.
type InstrumentsOwnerUpdatedIterator struct {
	Event *InstrumentsOwnerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsOwnerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsOwnerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsOwnerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsOwnerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsOwnerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsOwnerUpdated represents a OwnerUpdated event raised by the Instruments contract.
type InstrumentsOwnerUpdated struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerUpdated is a free log retrieval operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) FilterOwnerUpdated(opts *bind.FilterOpts, newOwner []common.Address) (*InstrumentsOwnerUpdatedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsOwnerUpdatedIterator{contract: _Instruments.contract, event: "OwnerUpdated", logs: logs, sub: sub}, nil
}

// WatchOwnerUpdated is a free log subscription operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) WatchOwnerUpdated(opts *bind.WatchOpts, sink chan<- *InstrumentsOwnerUpdated, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsOwnerUpdated)
				if err := _Instruments.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerUpdated is a log parse operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Instruments *InstrumentsFilterer) ParseOwnerUpdated(log types.Log) (*InstrumentsOwnerUpdated, error) {
	event := new(InstrumentsOwnerUpdated)
	if err := _Instruments.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Instruments contract.
type InstrumentsUpgradedIterator struct {
	Event *InstrumentsUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsUpgraded represents a Upgraded event raised by the Instruments contract.
type InstrumentsUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InstrumentsUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsUpgradedIterator{contract: _Instruments.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InstrumentsUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsUpgraded)
				if err := _Instruments.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Instruments *InstrumentsFilterer) ParseUpgraded(log types.Log) (*InstrumentsUpgraded, error) {
	event := new(InstrumentsUpgraded)
	if err := _Instruments.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstrumentsVersionInitializedIterator is returned from FilterVersionInitialized and is used to iterate over the raw logs and unpacked data for VersionInitialized events raised by the Instruments contract.
type InstrumentsVersionInitializedIterator struct {
	Event *InstrumentsVersionInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstrumentsVersionInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstrumentsVersionInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstrumentsVersionInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstrumentsVersionInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstrumentsVersionInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstrumentsVersionInitialized represents a VersionInitialized event raised by the Instruments contract.
type InstrumentsVersionInitialized struct {
	NewVersion *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVersionInitialized is a free log retrieval operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) FilterVersionInitialized(opts *bind.FilterOpts, newVersion []*big.Int) (*InstrumentsVersionInitializedIterator, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Instruments.contract.FilterLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return &InstrumentsVersionInitializedIterator{contract: _Instruments.contract, event: "VersionInitialized", logs: logs, sub: sub}, nil
}

// WatchVersionInitialized is a free log subscription operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) WatchVersionInitialized(opts *bind.WatchOpts, sink chan<- *InstrumentsVersionInitialized, newVersion []*big.Int) (event.Subscription, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Instruments.contract.WatchLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstrumentsVersionInitialized)
				if err := _Instruments.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionInitialized is a log parse operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Instruments *InstrumentsFilterer) ParseVersionInitialized(log types.Log) (*InstrumentsVersionInitialized, error) {
	event := new(InstrumentsVersionInitialized)
	if err := _Instruments.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
