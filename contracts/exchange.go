// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OrdersOrder is an auto generated low-level Go binding around an user-defined struct.
type OrdersOrder struct {
	Maker      common.Address
	IsBuy      bool
	LimitPrice *big.Int
	Amount     *big.Int
	Instrument *big.Int
	Salt       *big.Int
	Signature  []byte
	Fee        *big.Int
}

// ExchangeMetaData contains all meta data concerning the Exchange contract.
var ExchangeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"makerHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumExchangeInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidForceMakerOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enumExchangeInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidForceOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enumExchangeInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"takerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"makerHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumExchangeInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidMakerOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"takerHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumExchangeInterface.RevertReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"InvalidTakerOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthority\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accounts\",\"type\":\"address\"}],\"name\":\"AccountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"takerOrder\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"makerOrder\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Fill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instruments\",\"type\":\"address\"}],\"name\":\"InstrumentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"VersionInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"internalType\":\"structOrders.Order[]\",\"name\":\"makers\",\"type\":\"tuple[]\"}],\"name\":\"forceTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takerFill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"makerFills\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"makerQuote\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instruments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accounts\",\"type\":\"address\"}],\"name\":\"setAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instruments\",\"type\":\"address\"}],\"name\":\"setInstruments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"internalType\":\"structOrders.Order\",\"name\":\"taker\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instrument\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"internalType\":\"structOrders.Order[]\",\"name\":\"makers\",\"type\":\"tuple[]\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takerFill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"makerFills\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"makerQuote\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60c0604052306080523480156200001557600080fd5b5060405162004c9c38038062004c9c8339810160408190526200003891620001ae565b6200004f82826200005b60201b6200234f1760201c565b60a052506200028e9050565b6040516c08a92a06e626488dedac2d2dc5609b1b60208201526b1cdd1c9a5b99c81b985b594b60a21b602d8201526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b60398201526e1d5a5b9d0c8d4d8818da185a5b9259608a1b6048820152602960f81b60578201526000906058016040516020818303038152906040528051906020012083604051602001620000f2919062000270565b60408051601f198184030181528282528051602091820120908301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201526080810183905260a00160405160208183030381529060405280519060200120905092915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001985781810151838201526020016200017e565b83811115620001a8576000848401525b50505050565b60008060408385031215620001c257600080fd5b82516001600160401b0380821115620001da57600080fd5b818501915085601f830112620001ef57600080fd5b81518181111562000204576200020462000165565b604051601f8201601f19908116603f011681019083821181831017156200022f576200022f62000165565b816040528281528860208487010111156200024957600080fd5b6200025c8360208301602088016200017b565b602097909701519698969750505050505050565b60008251620002848184602087016200017b565b9190910192915050565b60805160a0516149b7620002e5600039600081816104a6015281816118ee015281816120b30152612cbb015260008181611066015281816111160152818161126801528181611318015261146101526149b76000f3fe60806040526004361061015f5760003560e01c8063667e6715116100c0578063c4d66de811610074578063d305787711610059578063d305787714610454578063d43207e914610474578063f698da251461049457600080fd5b8063c4d66de814610404578063c6790f191461042457600080fd5b80636cd22eaf116100a55780636cd22eaf146103875780638da5cb5b146103a757806391223d69146103d457600080fd5b8063667e67151461033a57806368cd03f61461035a57600080fd5b80632e463e92116101175780633bbd64bc116100fc5780633bbd64bc146102d25780634f1ef2861461031257806352d1902d1461032557600080fd5b80632e463e92146102605780633659cfe6146102b257600080fd5b806313af40351161014857806313af4035146101e557806320158c4414610205578063292bd88f1461024057600080fd5b806306fdde031461016457806308274382146101c3575b600080fd5b34801561017057600080fd5b506101ad6040518060400160405280600881526020017f45786368616e676500000000000000000000000000000000000000000000000081525081565b6040516101ba91906140ea565b60405180910390f35b3480156101cf57600080fd5b506101e36101de366004614168565b6104c8565b005b3480156101f157600080fd5b506101e3610200366004614168565b610588565b34801561021157600080fd5b50610232610220366004614185565b60076020526000908152604090205481565b6040519081526020016101ba565b34801561024c57600080fd5b506101e361025b3660046141b7565b6105e5565b34801561026c57600080fd5b5060065461028d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ba565b3480156102be57600080fd5b506101e36102cd366004614168565b61104f565b3480156102de57600080fd5b506103026102ed366004614168565b60046020526000908152604090205460ff1681565b60405190151581526020016101ba565b6101e361032036600461431d565b611251565b34801561033157600080fd5b50610232611447565b34801561034657600080fd5b506101e3610355366004614168565b611533565b34801561036657600080fd5b5060055461028d9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561039357600080fd5b506101e36103a236600461436d565b6115f3565b3480156103b357600080fd5b5060005461028d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103e057600080fd5b506103026103ef366004614168565b60036020526000908152604090205460ff1681565b34801561041057600080fd5b506101e361041f366004614168565b611710565b34801561043057600080fd5b5061044461043f3660046143f2565b6117a1565b6040516101ba949392919061449f565b34801561046057600080fd5b506101e361046f36600461436d565b611cce565b34801561048057600080fd5b5061044461048f3660046144db565b611deb565b3480156104a057600080fd5b506102327f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610519576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d9576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105e2816124cf565b50565b600254600114610621576040517fab143c0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280553360009081526004602052604090205460ff1661067c578060076040517ffa30f0c10000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b60405180910390fd5b600554604080517f999b93af000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691600091839163999b93af916004808201926020929091908290030181865afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071591906145e8565b905060008273ffffffffffffffffffffffffffffffffffffffff1663158626f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078891906145e8565b905060008373ffffffffffffffffffffffffffffffffffffffff16634614be9f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fb91906145e8565b90508915610b8d576040517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015284811660248301526044820188905260009190861690637de182c59060640160408051808303816000875af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190614605565b91506000905081600b8111156108bf576108bf61456a565b1461090257856108ce8261253c565b6040517ffa30f0c10000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b6040517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528581166024830152604482018a9052861690637de182c59060640160408051808303816000875af115801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190614605565b91506000905081600b8111156109ba576109ba61456a565b146109c957856108ce8261253c565b73ffffffffffffffffffffffffffffffffffffffff851663262709e68d866109f18b8d61465d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152929091166024830152604482015260640160408051808303816000875af1158015610a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8d9190614605565b91506000905081600b811115610aa557610aa561456a565b14610ab457856108ce8261253c565b6006546040517fcf7198ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528e81166024830152604482018d9052606482018c9052600092169063cf7198ac906084016020604051808303816000875af1158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190614675565b90506000816005811115610b7757610b7761456a565b14610b8657866108ce826125ad565b5050610fd7565b6040517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015284811660248301526044820188905260009190861690637de182c59060640160408051808303816000875af1158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190614605565b91506000905081600b811115610c4957610c4961456a565b14610c5857856108ce8261253c565b6040517f262709e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528581166024830152604482018a905286169063262709e69060640160408051808303816000875af1158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190614605565b91506000905081600b811115610d1057610d1061456a565b14610d1f57856108ce8261253c565b86881115610e175773ffffffffffffffffffffffffffffffffffffffff8516637de182c58d86610d4f8b8d614696565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152929091166024830152604482015260640160408051808303816000875af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190614605565b91506000905081600b811115610e0357610e0361456a565b14610e1257856108ce8261253c565b610f02565b73ffffffffffffffffffffffffffffffffffffffff851663262709e68d86610e3f8c8c614696565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152929091166024830152604482015260640160408051808303816000875af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190614605565b91506000905081600b811115610ef357610ef361456a565b14610f0257856108ce8261253c565b6006546040517fcf7198ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e811660048301528581166024830152604482018d9052606482018c9052600092169063cf7198ac906084016020604051808303816000875af1158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf9190614675565b90506000816005811115610fc557610fc561456a565b14610fd457866108ce826125ad565b50505b604080518b15158152602081018a90529081018890526060810187905273ffffffffffffffffffffffffffffffffffffffff8c16908a9087907f5846efdcc386ed436ec4f14203bd6da85657baa54673e7acc4e0f5cc354b16b29060800160405180910390a450506001600255505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610673565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166111897f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610673565b61123581612619565b604080516000808252602082019092526105e29183919061266a565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610673565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661138b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461142e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610673565b61143782612619565b6114438282600161266a565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461150e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610673565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60005473ffffffffffffffffffffffffffffffffffffffff163314611584576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f50eb8cf43b6ebfc7f9c82d966ed94d0d56e326150c0c770dfead0dcb8c02c8fa90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314611644576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611691576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc91a35050565b600161171c8180614696565b60015414611756576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001036117645760016002555b61176d826124cf565b600181905560405181907f7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d90600090a25050565b6000806060806002546001146117e3576040517fab143c0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805560408051610140810182526000818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082015260055473ffffffffffffffffffffffffffffffffffffffff90811680835260065490911660208084019190915283517f999b93af00000000000000000000000000000000000000000000000000000000815293519293919263999b93af9260048082019392918290030181865afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ce91906145e8565b73ffffffffffffffffffffffffffffffffffffffff16604082015261191c7f00000000000000000000000000000000000000000000000000000000000000006119168a6146ad565b9061286e565b60808201523360009081526004602052604090205460ff1661197357806080015160076040517f6be134e30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b60208101516040517fc7f9df8b00000000000000000000000000000000000000000000000000000000815260808a0135600482015273ffffffffffffffffffffffffffffffffffffffff9091169063c7f9df8b90602401602060405180830381865afa1580156119e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0b9190614749565b15611a4b57806080015160086040517f6be134e30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b611a5e8160000151898360800151612a94565b611a9d57806080015160096040517f6be134e30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b60808101516000908152600760205260409020546060890135811115611af8578160800151600a6040517f6be134e30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b611b068160608b0135614696565b6101008301528667ffffffffffffffff811115611b2557611b25614219565b604051908082528060200260200182016040528015611b4e578160200160208202803683370190505b5093508667ffffffffffffffff811115611b6a57611b6a614219565b604051908082528060200260200182016040528015611b93578160200160208202803683370190505b50925050600080611bb1838b611ba8906146ad565b8b8b8989612c49565b9092509050600081600e811115611bca57611bca61456a565b14611c505782608001518203611c14578260800151816040517f6be134e30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b826080015182826040517fbb0e4d3800000000000000000000000000000000000000000000000000000000815260040161067393929190614766565b89606001358361010001511115611c9c578260800151600b6040517f6be134e30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b610100830151611cb09060608c0135614696565b96508261012001519550505050600160028190555093509350935093565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d1f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611d6c576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c0091a35050565b600080606080600254600114611e2d576040517fab143c0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280553360009081526004602052604090205460ff16611e7f578660076040517fcee4edc30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152611f30604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001600081525090565b60055473ffffffffffffffffffffffffffffffffffffffff908116808452600654909116602080850191909152604080517f999b93af000000000000000000000000000000000000000000000000000000008152905163999b93af926004808401939192918290030181865afa158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd291906145e8565b73ffffffffffffffffffffffffffffffffffffffff908116604084810191909152602084015190517fc7f9df8b000000000000000000000000000000000000000000000000000000008152600481018f905291169063c7f9df8b90602401602060405180830381865afa15801561204d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120719190614749565b156120ad578860086040517fcee4edc30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b6120d7897f0000000000000000000000000000000000000000000000000000000000000000612fe5565b60808301819052600090815260076020526040902054156121295788600a6040517fcee4edc30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b73ffffffffffffffffffffffffffffffffffffffff8e1681528c151560208201528c612156576000612178565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040820152606081018b9052608081018c905260e081018a905261010082018b90528667ffffffffffffffff8111156121b3576121b3614219565b6040519080825280602002602001820160405280156121dc578160200160208202803683370190505b5093508667ffffffffffffffff8111156121f8576121f8614219565b604051908082528060200260200182016040528015612221578160200160208202803683370190505b50925060008061223584848c8c8a8a612c49565b9092509050600081600e81111561224e5761224e61456a565b146122cd5783608001518203612295578a60076040517fcee4edc30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b8a82826040517fa189074600000000000000000000000000000000000000000000000000000000815260040161067393929190614766565b82606001518461010001511115612315578a600b6040517fcee4edc30000000000000000000000000000000000000000000000000000000081526004016106739291906145d4565b836101000151836060015161232a9190614696565b9750836101200151965050505050600160028190555098509850985098945050505050565b6040517f454950373132446f6d61696e280000000000000000000000000000000000000060208201527f737472696e67206e616d652c0000000000000000000000000000000000000000602d8201527f737472696e672076657273696f6e2c000000000000000000000000000000000060398201527f75696e7432353620636861696e4964000000000000000000000000000000000060488201527f29000000000000000000000000000000000000000000000000000000000000006057820152600090605801604051602081830303815290604052805190602001208360405160200161243d9190614781565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201526080810183905260a0016040516020818303038152906040528051906020012090505b92915050565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b91a250565b60008082600b8111156125515761255161456a565b0361255e57506000919050565b600482600b8111156125725761257261456a565b0361257f57506002919050565b600282600b8111156125935761259361456a565b036125a057506003919050565b506001919050565b919050565b6000808260058111156125c2576125c261456a565b036125cf57506000919050565b60028260058111156125e3576125e361456a565b036125f057506005919050565b60038260058111156126045761260461456a565b0361261157506006919050565b506004919050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105e2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156126a25761269d836130b1565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612727575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526127249181019061479d565b60015b6127b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610673565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610673565b5061269d8383836131bb565b6000612a8d826040516020016129b1907f4f7264657228000000000000000000000000000000000000000000000000000081527f61646472657373206d616b65722c00000000000000000000000000000000000060068201527f626f6f6c2069734275792c00000000000000000000000000000000000000000060148201527f75696e74323536206c696d697450726963652c00000000000000000000000000601f8201527f75696e7432353620616d6f756e742c000000000000000000000000000000000060328201527f75696e743235362073616c742c0000000000000000000000000000000000000060418201527f75696e7432353620696e737472756d656e740000000000000000000000000000604e8201527f2900000000000000000000000000000000000000000000000000000000000000606082015260610190565b6040516020818303038152906040528051906020012085600001518660200151876040015188606001518960a001518a60800151604051602001612a3c979695949392919096875273ffffffffffffffffffffffffffffffffffffffff95909516602087015292151560408601526060850191909152608084015260a083015260c082015260e00190565b604051602081830303815290604052805190602001207f1901000000000000000000000000000000000000000000000000000000000000600090815260029290925260229081526042822091905290565b9392505050565b6000612aa360c08401846147b6565b9050600003612ab457506000612a8d565b6000612b0183612ac760c08701876147b6565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131e692505050565b905073ffffffffffffffffffffffffffffffffffffffff8116612b28576000915050612a8d565b612b356020850185614168565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612b71576001915050612a8d565b73ffffffffffffffffffffffffffffffffffffffff85166362946d3b612b9a6020870187614168565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff91821660048201529084166024820152604401602060405180830381865afa158015612c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2f9190614749565b15612c3e576001915050612a8d565b506000949350505050565b6000806000612c66898a608001518a600001518b60e00151613340565b9050600081600e811115612c7c57612c7c61456a565b14612c8f57608089015192509050612fda565b60005b86811015612fd057896101000151600003612cb6575060009250829150612fda9050565b612d077f0000000000000000000000000000000000000000000000000000000000000000898984818110612cec57612cec61481b565b9050602002810190612cfe919061484a565b611916906146ad565b60a08b0152878782818110612d1e57612d1e61481b565b9050602002810190612d30919061484a565b612d4190604081019060200161487e565b15158960200151151503612d5f575050505060a0860151600c612fda565b878782818110612d7157612d7161481b565b9050602002810190612d83919061484a565b60800135896080015114612da1575050505060a0860151600d612fda565b612dd58a8a8a8a85818110612db857612db861481b565b9050602002810190612dca919061484a565b8d610100015161379e565b60e08d019190915260c08c01919091529150600082600e811115612dfb57612dfb61456a565b14612e0f575060a089015192509050612fda565b60c08a015115612fc0578960e00151858281518110612e3057612e3061481b565b6020026020010181815250508960e001518a61012001818151612e53919061465d565b90525060c08a015160808b015160009081526007602052604081208054909190612e7e90849061465d565b909155505060c08a015160a08b015160009081526007602052604081208054909190612eab90849061465d565b909155505060c08a01516101008b018051612ec7908390614696565b90525060c08a01518651879083908110612ee357612ee361481b565b602002602001018181525050612f268a8a8a8a85818110612f0657612f0661481b565b9050602002810190612f18919061484a565b612f21906146ad565b6138b9565b9150600082600e811115612f3c57612f3c61456a565b14612f50575060a089015192509050612fda565b612f688a8b60a001518b600001518c60e00151613340565b9150600082600e811115612f7e57612f7e61456a565b14612f92575060a089015192509050612fda565b612fc08a8a8a8a85818110612fa957612fa961481b565b9050602002810190612fbb919061484a565b613e0e565b612fc98161489b565b9050612c92565b5060009250829150505b965096945050505050565b6000612a8d8260405160200161306a907f466f7263654f726465722800000000000000000000000000000000000000000081527f75696e7432353620696400000000000000000000000000000000000000000000600b8201527f2900000000000000000000000000000000000000000000000000000000000000601582015260160190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301528101869052606001612a3c565b73ffffffffffffffffffffffffffffffffffffffff81163b613155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610673565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6131c483613eb7565b6000825111806131d15750805b1561269d576131e08383613f04565b50505050565b600080600080845160400361323157505050602082015160408301517f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169060ff1c601b01613286565b845160410361327a5750505060208201516040830151606084015160001a601b811480159061326457508060ff16601c14155b1561327557600093505050506124c9565b613286565b600093505050506124c9565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156132ba57600093505050506124c9565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561330d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b60008082131561354d57845160408087015190517f262709e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152918216602482015260448101859052600092919091169063262709e69060640160408051808303816000875af11580156133d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f69190614605565b91506000905081600b81111561340e5761340e61456a565b146134245761341c8161253c565b915050613796565b8551606087015160408089015190517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152908216602482015260448101869052911690637de182c59060640160408051808303816000875af11580156134ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d09190614605565b91506000905081600b8111156134e8576134e861456a565b146134f65761341c8161253c565b8373ffffffffffffffffffffffffffffffffffffffff16857fb124cbc3422cb4f6eb9c89ce67b72f6699e9d526b5c348dde40b9b6d554de8ec8560405161353f91815260200190565b60405180910390a350612c3e565b6000821215612c3e576000856000015173ffffffffffffffffffffffffffffffffffffffff1663262709e6876060015188604001518661358c906148d3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152929091166024830152604482015260640160408051808303816000875af1158015613604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136289190614605565b91506000905081600b8111156136405761364061456a565b1461364e5761341c8161253c565b856000015173ffffffffffffffffffffffffffffffffffffffff16637de182c58588604001518661367e906148d3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152929091166024830152604482015260640160408051808303816000875af11580156136f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371a9190614605565b91506000905081600b8111156137325761373261456a565b146137405761341c8161253c565b8373ffffffffffffffffffffffffffffffffffffffff16857fb124cbc3422cb4f6eb9c89ce67b72f6699e9d526b5c348dde40b9b6d554de8ec8560405161378991815260200190565b60405180910390a3505060005b949350505050565b60008060006137b68760000151868960a00151612a94565b6137c957506000915081905060096138af565b85602001516137e25784604001358660400151116137ee565b84604001358660400151105b15613802575060009150819050600e6138af565b60a0870151600090815260076020526040902054606086013581111561383357600080600a935093509350506138af565b60a0880151600090815260076020526040812054613855906060890135614696565b90508060000361387157600080600094509450945050506138af565b80861161387e5785613880565b805b94508460000361389c57600080600094509450945050506138af565b6138aa858860400135613f29565b935050505b9450945094915050565b6000826020015115613b6f578351835160408087015160e088015191517f262709e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015290831660248201526044810191909152600092919091169063262709e69060640160408051808303816000875af1158015613955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139799190614605565b91506000905081600b8111156139915761399161456a565b146139a75761399f8161253c565b915050612a8d565b8451835160408088015160e089015191517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015290831660248201526044810191909152911690637de182c59060640160408051808303816000875af1158015613a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a569190614605565b91506000905081600b811115613a6e57613a6e61456a565b14613a7c5761399f8161253c565b602085015183518551608087015160c08901516040517fcf7198ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152600092919091169063cf7198ac906084016020604051808303816000875af1158015613b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3b9190614675565b90506000816005811115613b5157613b5161456a565b14613b6857613b5f816125ad565b92505050612a8d565b5050613e04565b8351825160408087015160e088015191517f262709e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015290831660248201526044810191909152600092919091169063262709e69060640160408051808303816000875af1158015613bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c239190614605565b91506000905081600b811115613c3b57613c3b61456a565b14613c495761399f8161253c565b8451845160408088015160e089015191517f7de182c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015290831660248201526044810191909152911690637de182c59060640160408051808303816000875af1158015613cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf89190614605565b91506000905081600b811115613d1057613d1061456a565b14613d1e5761399f8161253c565b602085015184518451608087015160c08901516040517fcf7198ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152600092919091169063cf7198ac906084016020604051808303816000875af1158015613db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddd9190614675565b90506000816005811115613df357613df361456a565b14613e0157613b5f816125ad565b50505b5060009392505050565b60808083015160a08501519185015184519192917f9f6c440b5173c1f570547f1fcfa0023a50a9da013934a68d1c62c3b968dbc24d90613e516020870187614168565b87602001518960c001518a60e00151604051613eaa95949392919073ffffffffffffffffffffffffffffffffffffffff958616815293909416602084015290151560408301526060820152608081019190915260a00190565b60405180910390a4505050565b613ec0816130b1565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060612a8d838360405180606001604052806027815260200161498460279139613f43565b6000620f4240613f39838561490b565b612a8d9190614948565b606073ffffffffffffffffffffffffffffffffffffffff84163b613fe9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610673565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516140119190614781565b600060405180830381855af49150503d806000811461404c576040519150601f19603f3d011682016040523d82523d6000602084013e614051565b606091505b509150915061406182828661406b565b9695505050505050565b6060831561407a575081612a8d565b82511561408a5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067391906140ea565b60005b838110156140d95781810151838201526020016140c1565b838111156131e05750506000910152565b60208152600082518060208401526141098160408501602087016140be565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff811681146105e257600080fd5b80356125a88161413b565b60006020828403121561417a57600080fd5b8135612a8d8161413b565b60006020828403121561419757600080fd5b5035919050565b80151581146105e257600080fd5b80356125a88161419e565b600080600080600080600060e0888a0312156141d257600080fd5b87356141dd8161413b565b965060208801356141ed8161419e565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561426c5761426c614219565b60405290565b600082601f83011261428357600080fd5b813567ffffffffffffffff8082111561429e5761429e614219565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156142e4576142e4614219565b816040528381528660208588010111156142fd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561433057600080fd5b823561433b8161413b565b9150602083013567ffffffffffffffff81111561435757600080fd5b61436385828601614272565b9150509250929050565b6000806040838503121561438057600080fd5b823561438b8161413b565b9150602083013561439b8161419e565b809150509250929050565b60008083601f8401126143b857600080fd5b50813567ffffffffffffffff8111156143d057600080fd5b6020830191508360208260051b85010111156143eb57600080fd5b9250929050565b60008060006040848603121561440757600080fd5b833567ffffffffffffffff8082111561441f57600080fd5b90850190610100828803121561443457600080fd5b9093506020850135908082111561444a57600080fd5b50614457868287016143a6565b9497909650939450505050565b600081518084526020808501945080840160005b8381101561449457815187529582019590820190600101614478565b509495945050505050565b8481528360208201526080604082015260006144be6080830185614464565b82810360608401526144d08185614464565b979650505050505050565b60008060008060008060008060e0898b0312156144f757600080fd5b88356145028161413b565b975060208901356145128161419e565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff81111561454a57600080fd5b6145568b828c016143a6565b999c989b5096995094979396929594505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600f81106145d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b82815260408101612a8d6020830184614599565b6000602082840312156145fa57600080fd5b8151612a8d8161413b565b6000806040838503121561461857600080fd5b825191506020830151600c811061439b57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156146705761467061462e565b500190565b60006020828403121561468757600080fd5b815160068110612a8d57600080fd5b6000828210156146a8576146a861462e565b500390565b600061010082360312156146c057600080fd5b6146c8614248565b6146d18361415d565b81526146df602084016141ac565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013567ffffffffffffffff81111561472657600080fd5b61473236828601614272565b60c08301525060e092830135928101929092525090565b60006020828403121561475b57600080fd5b8151612a8d8161419e565b83815260208101839052606081016137966040830184614599565b600082516147938184602087016140be565b9190910192915050565b6000602082840312156147af57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126147eb57600080fd5b83018035915067ffffffffffffffff82111561480657600080fd5b6020019150368190038213156143eb57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183360301811261479357600080fd5b60006020828403121561489057600080fd5b8135612a8d8161419e565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036148cc576148cc61462e565b5060010190565b60007f800000000000000000000000000000000000000000000000000000000000000082036149045761490461462e565b5060000390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149435761494361462e565b500290565b60008261497e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080f000a",
}

// ExchangeABI is the input ABI used to generate the binding from.
// Deprecated: Use ExchangeMetaData.ABI instead.
var ExchangeABI = ExchangeMetaData.ABI

// ExchangeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ExchangeMetaData.Bin instead.
var ExchangeBin = ExchangeMetaData.Bin

// DeployExchange deploys a new Ethereum contract, binding an instance of Exchange to it.
func DeployExchange(auth *bind.TransactOpts, backend bind.ContractBackend, _domain string, _chainId *big.Int) (common.Address, *types.Transaction, *Exchange, error) {
	parsed, err := ExchangeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ExchangeBin), backend, _domain, _chainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Exchange{ExchangeCaller: ExchangeCaller{contract: contract}, ExchangeTransactor: ExchangeTransactor{contract: contract}, ExchangeFilterer: ExchangeFilterer{contract: contract}}, nil
}

// Exchange is an auto generated Go binding around an Ethereum contract.
type Exchange struct {
	ExchangeCaller     // Read-only binding to the contract
	ExchangeTransactor // Write-only binding to the contract
	ExchangeFilterer   // Log filterer for contract events
}

// ExchangeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExchangeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExchangeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExchangeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExchangeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExchangeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExchangeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExchangeSession struct {
	Contract     *Exchange         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ExchangeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExchangeCallerSession struct {
	Contract *ExchangeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ExchangeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExchangeTransactorSession struct {
	Contract     *ExchangeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExchangeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExchangeRaw struct {
	Contract *Exchange // Generic contract binding to access the raw methods on
}

// ExchangeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExchangeCallerRaw struct {
	Contract *ExchangeCaller // Generic read-only contract binding to access the raw methods on
}

// ExchangeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExchangeTransactorRaw struct {
	Contract *ExchangeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExchange creates a new instance of Exchange, bound to a specific deployed contract.
func NewExchange(address common.Address, backend bind.ContractBackend) (*Exchange, error) {
	contract, err := bindExchange(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Exchange{ExchangeCaller: ExchangeCaller{contract: contract}, ExchangeTransactor: ExchangeTransactor{contract: contract}, ExchangeFilterer: ExchangeFilterer{contract: contract}}, nil
}

// NewExchangeCaller creates a new read-only instance of Exchange, bound to a specific deployed contract.
func NewExchangeCaller(address common.Address, caller bind.ContractCaller) (*ExchangeCaller, error) {
	contract, err := bindExchange(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExchangeCaller{contract: contract}, nil
}

// NewExchangeTransactor creates a new write-only instance of Exchange, bound to a specific deployed contract.
func NewExchangeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExchangeTransactor, error) {
	contract, err := bindExchange(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExchangeTransactor{contract: contract}, nil
}

// NewExchangeFilterer creates a new log filterer instance of Exchange, bound to a specific deployed contract.
func NewExchangeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExchangeFilterer, error) {
	contract, err := bindExchange(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExchangeFilterer{contract: contract}, nil
}

// bindExchange binds a generic wrapper to an already deployed contract.
func bindExchange(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExchangeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Exchange *ExchangeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Exchange.Contract.ExchangeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Exchange *ExchangeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Exchange.Contract.ExchangeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Exchange *ExchangeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Exchange.Contract.ExchangeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Exchange *ExchangeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Exchange.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Exchange *ExchangeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Exchange.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Exchange *ExchangeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Exchange.Contract.contract.Transact(opts, method, params...)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Exchange *ExchangeCaller) Accounts(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "accounts")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Exchange *ExchangeSession) Accounts() (common.Address, error) {
	return _Exchange.Contract.Accounts(&_Exchange.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address)
func (_Exchange *ExchangeCallerSession) Accounts() (common.Address, error) {
	return _Exchange.Contract.Accounts(&_Exchange.CallOpts)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Exchange *ExchangeCaller) Authorities(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "authorities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Exchange *ExchangeSession) Authorities(arg0 common.Address) (bool, error) {
	return _Exchange.Contract.Authorities(&_Exchange.CallOpts, arg0)
}

// Authorities is a free data retrieval call binding the contract method 0x91223d69.
//
// Solidity: function authorities(address ) view returns(bool)
func (_Exchange *ExchangeCallerSession) Authorities(arg0 common.Address) (bool, error) {
	return _Exchange.Contract.Authorities(&_Exchange.CallOpts, arg0)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_Exchange *ExchangeCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_Exchange *ExchangeSession) DomainSeparator() ([32]byte, error) {
	return _Exchange.Contract.DomainSeparator(&_Exchange.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_Exchange *ExchangeCallerSession) DomainSeparator() ([32]byte, error) {
	return _Exchange.Contract.DomainSeparator(&_Exchange.CallOpts)
}

// Fills is a free data retrieval call binding the contract method 0x20158c44.
//
// Solidity: function fills(bytes32 ) view returns(uint256)
func (_Exchange *ExchangeCaller) Fills(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "fills", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Fills is a free data retrieval call binding the contract method 0x20158c44.
//
// Solidity: function fills(bytes32 ) view returns(uint256)
func (_Exchange *ExchangeSession) Fills(arg0 [32]byte) (*big.Int, error) {
	return _Exchange.Contract.Fills(&_Exchange.CallOpts, arg0)
}

// Fills is a free data retrieval call binding the contract method 0x20158c44.
//
// Solidity: function fills(bytes32 ) view returns(uint256)
func (_Exchange *ExchangeCallerSession) Fills(arg0 [32]byte) (*big.Int, error) {
	return _Exchange.Contract.Fills(&_Exchange.CallOpts, arg0)
}

// Instruments is a free data retrieval call binding the contract method 0x2e463e92.
//
// Solidity: function instruments() view returns(address)
func (_Exchange *ExchangeCaller) Instruments(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "instruments")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Instruments is a free data retrieval call binding the contract method 0x2e463e92.
//
// Solidity: function instruments() view returns(address)
func (_Exchange *ExchangeSession) Instruments() (common.Address, error) {
	return _Exchange.Contract.Instruments(&_Exchange.CallOpts)
}

// Instruments is a free data retrieval call binding the contract method 0x2e463e92.
//
// Solidity: function instruments() view returns(address)
func (_Exchange *ExchangeCallerSession) Instruments() (common.Address, error) {
	return _Exchange.Contract.Instruments(&_Exchange.CallOpts)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Exchange *ExchangeCaller) Keepers(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "keepers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Exchange *ExchangeSession) Keepers(arg0 common.Address) (bool, error) {
	return _Exchange.Contract.Keepers(&_Exchange.CallOpts, arg0)
}

// Keepers is a free data retrieval call binding the contract method 0x3bbd64bc.
//
// Solidity: function keepers(address ) view returns(bool)
func (_Exchange *ExchangeCallerSession) Keepers(arg0 common.Address) (bool, error) {
	return _Exchange.Contract.Keepers(&_Exchange.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Exchange *ExchangeCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Exchange *ExchangeSession) Name() (string, error) {
	return _Exchange.Contract.Name(&_Exchange.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Exchange *ExchangeCallerSession) Name() (string, error) {
	return _Exchange.Contract.Name(&_Exchange.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Exchange *ExchangeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Exchange *ExchangeSession) Owner() (common.Address, error) {
	return _Exchange.Contract.Owner(&_Exchange.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Exchange *ExchangeCallerSession) Owner() (common.Address, error) {
	return _Exchange.Contract.Owner(&_Exchange.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Exchange *ExchangeCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Exchange *ExchangeSession) ProxiableUUID() ([32]byte, error) {
	return _Exchange.Contract.ProxiableUUID(&_Exchange.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Exchange *ExchangeCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Exchange.Contract.ProxiableUUID(&_Exchange.CallOpts)
}

// ForceTrade is a paid mutator transaction binding the contract method 0xd43207e9.
//
// Solidity: function forceTrade(address account, bool isBuy, uint256 instrument, uint256 amount, int256 fee, uint256 id, (address,bool,uint256,uint256,uint256,uint256,bytes,int256)[] makers) returns(uint256 takerFill, uint256 takerQuote, uint256[] makerFills, uint256[] makerQuote)
func (_Exchange *ExchangeTransactor) ForceTrade(opts *bind.TransactOpts, account common.Address, isBuy bool, instrument *big.Int, amount *big.Int, fee *big.Int, id *big.Int, makers []OrdersOrder) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "forceTrade", account, isBuy, instrument, amount, fee, id, makers)
}

// ForceTrade is a paid mutator transaction binding the contract method 0xd43207e9.
//
// Solidity: function forceTrade(address account, bool isBuy, uint256 instrument, uint256 amount, int256 fee, uint256 id, (address,bool,uint256,uint256,uint256,uint256,bytes,int256)[] makers) returns(uint256 takerFill, uint256 takerQuote, uint256[] makerFills, uint256[] makerQuote)
func (_Exchange *ExchangeSession) ForceTrade(account common.Address, isBuy bool, instrument *big.Int, amount *big.Int, fee *big.Int, id *big.Int, makers []OrdersOrder) (*types.Transaction, error) {
	return _Exchange.Contract.ForceTrade(&_Exchange.TransactOpts, account, isBuy, instrument, amount, fee, id, makers)
}

// ForceTrade is a paid mutator transaction binding the contract method 0xd43207e9.
//
// Solidity: function forceTrade(address account, bool isBuy, uint256 instrument, uint256 amount, int256 fee, uint256 id, (address,bool,uint256,uint256,uint256,uint256,bytes,int256)[] makers) returns(uint256 takerFill, uint256 takerQuote, uint256[] makerFills, uint256[] makerQuote)
func (_Exchange *ExchangeTransactorSession) ForceTrade(account common.Address, isBuy bool, instrument *big.Int, amount *big.Int, fee *big.Int, id *big.Int, makers []OrdersOrder) (*types.Transaction, error) {
	return _Exchange.Contract.ForceTrade(&_Exchange.TransactOpts, account, isBuy, instrument, amount, fee, id, makers)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Exchange *ExchangeTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "initialize", _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Exchange *ExchangeSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.Initialize(&_Exchange.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_Exchange *ExchangeTransactorSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.Initialize(&_Exchange.TransactOpts, _owner)
}

// Liquidate is a paid mutator transaction binding the contract method 0x292bd88f.
//
// Solidity: function liquidate(address account, bool isBuy, uint256 instrument, uint256 amount, uint256 liquidateQuote, uint256 fee, uint256 id) returns()
func (_Exchange *ExchangeTransactor) Liquidate(opts *bind.TransactOpts, account common.Address, isBuy bool, instrument *big.Int, amount *big.Int, liquidateQuote *big.Int, fee *big.Int, id *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "liquidate", account, isBuy, instrument, amount, liquidateQuote, fee, id)
}

// Liquidate is a paid mutator transaction binding the contract method 0x292bd88f.
//
// Solidity: function liquidate(address account, bool isBuy, uint256 instrument, uint256 amount, uint256 liquidateQuote, uint256 fee, uint256 id) returns()
func (_Exchange *ExchangeSession) Liquidate(account common.Address, isBuy bool, instrument *big.Int, amount *big.Int, liquidateQuote *big.Int, fee *big.Int, id *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.Liquidate(&_Exchange.TransactOpts, account, isBuy, instrument, amount, liquidateQuote, fee, id)
}

// Liquidate is a paid mutator transaction binding the contract method 0x292bd88f.
//
// Solidity: function liquidate(address account, bool isBuy, uint256 instrument, uint256 amount, uint256 liquidateQuote, uint256 fee, uint256 id) returns()
func (_Exchange *ExchangeTransactorSession) Liquidate(account common.Address, isBuy bool, instrument *big.Int, amount *big.Int, liquidateQuote *big.Int, fee *big.Int, id *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.Liquidate(&_Exchange.TransactOpts, account, isBuy, instrument, amount, liquidateQuote, fee, id)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Exchange *ExchangeTransactor) SetAccounts(opts *bind.TransactOpts, _accounts common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "setAccounts", _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Exchange *ExchangeSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.SetAccounts(&_Exchange.TransactOpts, _accounts)
}

// SetAccounts is a paid mutator transaction binding the contract method 0x08274382.
//
// Solidity: function setAccounts(address _accounts) returns()
func (_Exchange *ExchangeTransactorSession) SetAccounts(_accounts common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.SetAccounts(&_Exchange.TransactOpts, _accounts)
}

// SetInstruments is a paid mutator transaction binding the contract method 0x667e6715.
//
// Solidity: function setInstruments(address _instruments) returns()
func (_Exchange *ExchangeTransactor) SetInstruments(opts *bind.TransactOpts, _instruments common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "setInstruments", _instruments)
}

// SetInstruments is a paid mutator transaction binding the contract method 0x667e6715.
//
// Solidity: function setInstruments(address _instruments) returns()
func (_Exchange *ExchangeSession) SetInstruments(_instruments common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.SetInstruments(&_Exchange.TransactOpts, _instruments)
}

// SetInstruments is a paid mutator transaction binding the contract method 0x667e6715.
//
// Solidity: function setInstruments(address _instruments) returns()
func (_Exchange *ExchangeTransactorSession) SetInstruments(_instruments common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.SetInstruments(&_Exchange.TransactOpts, _instruments)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Exchange *ExchangeTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Exchange *ExchangeSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.SetOwner(&_Exchange.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_Exchange *ExchangeTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.SetOwner(&_Exchange.TransactOpts, newOwner)
}

// Trade is a paid mutator transaction binding the contract method 0xc6790f19.
//
// Solidity: function trade((address,bool,uint256,uint256,uint256,uint256,bytes,int256) taker, (address,bool,uint256,uint256,uint256,uint256,bytes,int256)[] makers) returns(uint256 takerFill, uint256 takerQuote, uint256[] makerFills, uint256[] makerQuote)
func (_Exchange *ExchangeTransactor) Trade(opts *bind.TransactOpts, taker OrdersOrder, makers []OrdersOrder) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "trade", taker, makers)
}

// Trade is a paid mutator transaction binding the contract method 0xc6790f19.
//
// Solidity: function trade((address,bool,uint256,uint256,uint256,uint256,bytes,int256) taker, (address,bool,uint256,uint256,uint256,uint256,bytes,int256)[] makers) returns(uint256 takerFill, uint256 takerQuote, uint256[] makerFills, uint256[] makerQuote)
func (_Exchange *ExchangeSession) Trade(taker OrdersOrder, makers []OrdersOrder) (*types.Transaction, error) {
	return _Exchange.Contract.Trade(&_Exchange.TransactOpts, taker, makers)
}

// Trade is a paid mutator transaction binding the contract method 0xc6790f19.
//
// Solidity: function trade((address,bool,uint256,uint256,uint256,uint256,bytes,int256) taker, (address,bool,uint256,uint256,uint256,uint256,bytes,int256)[] makers) returns(uint256 takerFill, uint256 takerQuote, uint256[] makerFills, uint256[] makerQuote)
func (_Exchange *ExchangeTransactorSession) Trade(taker OrdersOrder, makers []OrdersOrder) (*types.Transaction, error) {
	return _Exchange.Contract.Trade(&_Exchange.TransactOpts, taker, makers)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Exchange *ExchangeTransactor) UpdateAuthority(opts *bind.TransactOpts, authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "updateAuthority", authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Exchange *ExchangeSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Exchange.Contract.UpdateAuthority(&_Exchange.TransactOpts, authority, allowed)
}

// UpdateAuthority is a paid mutator transaction binding the contract method 0x6cd22eaf.
//
// Solidity: function updateAuthority(address authority, bool allowed) returns()
func (_Exchange *ExchangeTransactorSession) UpdateAuthority(authority common.Address, allowed bool) (*types.Transaction, error) {
	return _Exchange.Contract.UpdateAuthority(&_Exchange.TransactOpts, authority, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Exchange *ExchangeTransactor) UpdateKeeper(opts *bind.TransactOpts, keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "updateKeeper", keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Exchange *ExchangeSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Exchange.Contract.UpdateKeeper(&_Exchange.TransactOpts, keeper, allowed)
}

// UpdateKeeper is a paid mutator transaction binding the contract method 0xd3057877.
//
// Solidity: function updateKeeper(address keeper, bool allowed) returns()
func (_Exchange *ExchangeTransactorSession) UpdateKeeper(keeper common.Address, allowed bool) (*types.Transaction, error) {
	return _Exchange.Contract.UpdateKeeper(&_Exchange.TransactOpts, keeper, allowed)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Exchange *ExchangeTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Exchange *ExchangeSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.UpgradeTo(&_Exchange.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Exchange *ExchangeTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.UpgradeTo(&_Exchange.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Exchange *ExchangeTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Exchange *ExchangeSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Exchange.Contract.UpgradeToAndCall(&_Exchange.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Exchange *ExchangeTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Exchange.Contract.UpgradeToAndCall(&_Exchange.TransactOpts, newImplementation, data)
}

// ExchangeAccountsUpdatedIterator is returned from FilterAccountsUpdated and is used to iterate over the raw logs and unpacked data for AccountsUpdated events raised by the Exchange contract.
type ExchangeAccountsUpdatedIterator struct {
	Event *ExchangeAccountsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeAccountsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeAccountsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeAccountsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeAccountsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeAccountsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeAccountsUpdated represents a AccountsUpdated event raised by the Exchange contract.
type ExchangeAccountsUpdated struct {
	Accounts common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAccountsUpdated is a free log retrieval operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Exchange *ExchangeFilterer) FilterAccountsUpdated(opts *bind.FilterOpts, accounts []common.Address) (*ExchangeAccountsUpdatedIterator, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeAccountsUpdatedIterator{contract: _Exchange.contract, event: "AccountsUpdated", logs: logs, sub: sub}, nil
}

// WatchAccountsUpdated is a free log subscription operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Exchange *ExchangeFilterer) WatchAccountsUpdated(opts *bind.WatchOpts, sink chan<- *ExchangeAccountsUpdated, accounts []common.Address) (event.Subscription, error) {

	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "AccountsUpdated", accountsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeAccountsUpdated)
				if err := _Exchange.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountsUpdated is a log parse operation binding the contract event 0xbecde7fe690c73ba54232f00eb06c31464f65b45aff18984febaa80df22dcb8d.
//
// Solidity: event AccountsUpdated(address indexed accounts)
func (_Exchange *ExchangeFilterer) ParseAccountsUpdated(log types.Log) (*ExchangeAccountsUpdated, error) {
	event := new(ExchangeAccountsUpdated)
	if err := _Exchange.contract.UnpackLog(event, "AccountsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Exchange contract.
type ExchangeAdminChangedIterator struct {
	Event *ExchangeAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeAdminChanged represents a AdminChanged event raised by the Exchange contract.
type ExchangeAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Exchange *ExchangeFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ExchangeAdminChangedIterator, error) {

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ExchangeAdminChangedIterator{contract: _Exchange.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Exchange *ExchangeFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ExchangeAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeAdminChanged)
				if err := _Exchange.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Exchange *ExchangeFilterer) ParseAdminChanged(log types.Log) (*ExchangeAdminChanged, error) {
	event := new(ExchangeAdminChanged)
	if err := _Exchange.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeAuthorityUpdatedIterator is returned from FilterAuthorityUpdated and is used to iterate over the raw logs and unpacked data for AuthorityUpdated events raised by the Exchange contract.
type ExchangeAuthorityUpdatedIterator struct {
	Event *ExchangeAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeAuthorityUpdated represents a AuthorityUpdated event raised by the Exchange contract.
type ExchangeAuthorityUpdated struct {
	Authority common.Address
	Allowed   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuthorityUpdated is a free log retrieval operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Exchange *ExchangeFilterer) FilterAuthorityUpdated(opts *bind.FilterOpts, authority []common.Address, allowed []bool) (*ExchangeAuthorityUpdatedIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeAuthorityUpdatedIterator{contract: _Exchange.contract, event: "AuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorityUpdated is a free log subscription operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Exchange *ExchangeFilterer) WatchAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *ExchangeAuthorityUpdated, authority []common.Address, allowed []bool) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "AuthorityUpdated", authorityRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeAuthorityUpdated)
				if err := _Exchange.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityUpdated is a log parse operation binding the contract event 0xc5238a63fa205f95e98807f6cbc91d2ad8555a2250075e47491f11d9c69db3bc.
//
// Solidity: event AuthorityUpdated(address indexed authority, bool indexed allowed)
func (_Exchange *ExchangeFilterer) ParseAuthorityUpdated(log types.Log) (*ExchangeAuthorityUpdated, error) {
	event := new(ExchangeAuthorityUpdated)
	if err := _Exchange.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Exchange contract.
type ExchangeBeaconUpgradedIterator struct {
	Event *ExchangeBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeBeaconUpgraded represents a BeaconUpgraded event raised by the Exchange contract.
type ExchangeBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Exchange *ExchangeFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ExchangeBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeBeaconUpgradedIterator{contract: _Exchange.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Exchange *ExchangeFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ExchangeBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeBeaconUpgraded)
				if err := _Exchange.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Exchange *ExchangeFilterer) ParseBeaconUpgraded(log types.Log) (*ExchangeBeaconUpgraded, error) {
	event := new(ExchangeBeaconUpgraded)
	if err := _Exchange.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeFeeIterator is returned from FilterFee and is used to iterate over the raw logs and unpacked data for Fee events raised by the Exchange contract.
type ExchangeFeeIterator struct {
	Event *ExchangeFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeFee represents a Fee event raised by the Exchange contract.
type ExchangeFee struct {
	Order   [32]byte
	Account common.Address
	Fee     *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFee is a free log retrieval operation binding the contract event 0xb124cbc3422cb4f6eb9c89ce67b72f6699e9d526b5c348dde40b9b6d554de8ec.
//
// Solidity: event Fee(bytes32 indexed order, address indexed account, int256 fee)
func (_Exchange *ExchangeFilterer) FilterFee(opts *bind.FilterOpts, order [][32]byte, account []common.Address) (*ExchangeFeeIterator, error) {

	var orderRule []interface{}
	for _, orderItem := range order {
		orderRule = append(orderRule, orderItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "Fee", orderRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeFeeIterator{contract: _Exchange.contract, event: "Fee", logs: logs, sub: sub}, nil
}

// WatchFee is a free log subscription operation binding the contract event 0xb124cbc3422cb4f6eb9c89ce67b72f6699e9d526b5c348dde40b9b6d554de8ec.
//
// Solidity: event Fee(bytes32 indexed order, address indexed account, int256 fee)
func (_Exchange *ExchangeFilterer) WatchFee(opts *bind.WatchOpts, sink chan<- *ExchangeFee, order [][32]byte, account []common.Address) (event.Subscription, error) {

	var orderRule []interface{}
	for _, orderItem := range order {
		orderRule = append(orderRule, orderItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "Fee", orderRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeFee)
				if err := _Exchange.contract.UnpackLog(event, "Fee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFee is a log parse operation binding the contract event 0xb124cbc3422cb4f6eb9c89ce67b72f6699e9d526b5c348dde40b9b6d554de8ec.
//
// Solidity: event Fee(bytes32 indexed order, address indexed account, int256 fee)
func (_Exchange *ExchangeFilterer) ParseFee(log types.Log) (*ExchangeFee, error) {
	event := new(ExchangeFee)
	if err := _Exchange.contract.UnpackLog(event, "Fee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeFillIterator is returned from FilterFill and is used to iterate over the raw logs and unpacked data for Fill events raised by the Exchange contract.
type ExchangeFillIterator struct {
	Event *ExchangeFill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeFillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeFill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeFill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeFillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeFillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeFill represents a Fill event raised by the Exchange contract.
type ExchangeFill struct {
	TakerOrder       [32]byte
	MakerOrder       [32]byte
	Instrument       *big.Int
	Taker            common.Address
	Maker            common.Address
	IsBuy            bool
	Amount           *big.Int
	CollateralAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterFill is a free log retrieval operation binding the contract event 0x9f6c440b5173c1f570547f1fcfa0023a50a9da013934a68d1c62c3b968dbc24d.
//
// Solidity: event Fill(bytes32 indexed takerOrder, bytes32 indexed makerOrder, uint256 indexed instrument, address taker, address maker, bool isBuy, uint256 amount, uint256 collateralAmount)
func (_Exchange *ExchangeFilterer) FilterFill(opts *bind.FilterOpts, takerOrder [][32]byte, makerOrder [][32]byte, instrument []*big.Int) (*ExchangeFillIterator, error) {

	var takerOrderRule []interface{}
	for _, takerOrderItem := range takerOrder {
		takerOrderRule = append(takerOrderRule, takerOrderItem)
	}
	var makerOrderRule []interface{}
	for _, makerOrderItem := range makerOrder {
		makerOrderRule = append(makerOrderRule, makerOrderItem)
	}
	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "Fill", takerOrderRule, makerOrderRule, instrumentRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeFillIterator{contract: _Exchange.contract, event: "Fill", logs: logs, sub: sub}, nil
}

// WatchFill is a free log subscription operation binding the contract event 0x9f6c440b5173c1f570547f1fcfa0023a50a9da013934a68d1c62c3b968dbc24d.
//
// Solidity: event Fill(bytes32 indexed takerOrder, bytes32 indexed makerOrder, uint256 indexed instrument, address taker, address maker, bool isBuy, uint256 amount, uint256 collateralAmount)
func (_Exchange *ExchangeFilterer) WatchFill(opts *bind.WatchOpts, sink chan<- *ExchangeFill, takerOrder [][32]byte, makerOrder [][32]byte, instrument []*big.Int) (event.Subscription, error) {

	var takerOrderRule []interface{}
	for _, takerOrderItem := range takerOrder {
		takerOrderRule = append(takerOrderRule, takerOrderItem)
	}
	var makerOrderRule []interface{}
	for _, makerOrderItem := range makerOrder {
		makerOrderRule = append(makerOrderRule, makerOrderItem)
	}
	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "Fill", takerOrderRule, makerOrderRule, instrumentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeFill)
				if err := _Exchange.contract.UnpackLog(event, "Fill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFill is a log parse operation binding the contract event 0x9f6c440b5173c1f570547f1fcfa0023a50a9da013934a68d1c62c3b968dbc24d.
//
// Solidity: event Fill(bytes32 indexed takerOrder, bytes32 indexed makerOrder, uint256 indexed instrument, address taker, address maker, bool isBuy, uint256 amount, uint256 collateralAmount)
func (_Exchange *ExchangeFilterer) ParseFill(log types.Log) (*ExchangeFill, error) {
	event := new(ExchangeFill)
	if err := _Exchange.contract.UnpackLog(event, "Fill", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeInstrumentsUpdatedIterator is returned from FilterInstrumentsUpdated and is used to iterate over the raw logs and unpacked data for InstrumentsUpdated events raised by the Exchange contract.
type ExchangeInstrumentsUpdatedIterator struct {
	Event *ExchangeInstrumentsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeInstrumentsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeInstrumentsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeInstrumentsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeInstrumentsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeInstrumentsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeInstrumentsUpdated represents a InstrumentsUpdated event raised by the Exchange contract.
type ExchangeInstrumentsUpdated struct {
	Instruments common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInstrumentsUpdated is a free log retrieval operation binding the contract event 0x50eb8cf43b6ebfc7f9c82d966ed94d0d56e326150c0c770dfead0dcb8c02c8fa.
//
// Solidity: event InstrumentsUpdated(address indexed instruments)
func (_Exchange *ExchangeFilterer) FilterInstrumentsUpdated(opts *bind.FilterOpts, instruments []common.Address) (*ExchangeInstrumentsUpdatedIterator, error) {

	var instrumentsRule []interface{}
	for _, instrumentsItem := range instruments {
		instrumentsRule = append(instrumentsRule, instrumentsItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "InstrumentsUpdated", instrumentsRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeInstrumentsUpdatedIterator{contract: _Exchange.contract, event: "InstrumentsUpdated", logs: logs, sub: sub}, nil
}

// WatchInstrumentsUpdated is a free log subscription operation binding the contract event 0x50eb8cf43b6ebfc7f9c82d966ed94d0d56e326150c0c770dfead0dcb8c02c8fa.
//
// Solidity: event InstrumentsUpdated(address indexed instruments)
func (_Exchange *ExchangeFilterer) WatchInstrumentsUpdated(opts *bind.WatchOpts, sink chan<- *ExchangeInstrumentsUpdated, instruments []common.Address) (event.Subscription, error) {

	var instrumentsRule []interface{}
	for _, instrumentsItem := range instruments {
		instrumentsRule = append(instrumentsRule, instrumentsItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "InstrumentsUpdated", instrumentsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeInstrumentsUpdated)
				if err := _Exchange.contract.UnpackLog(event, "InstrumentsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInstrumentsUpdated is a log parse operation binding the contract event 0x50eb8cf43b6ebfc7f9c82d966ed94d0d56e326150c0c770dfead0dcb8c02c8fa.
//
// Solidity: event InstrumentsUpdated(address indexed instruments)
func (_Exchange *ExchangeFilterer) ParseInstrumentsUpdated(log types.Log) (*ExchangeInstrumentsUpdated, error) {
	event := new(ExchangeInstrumentsUpdated)
	if err := _Exchange.contract.UnpackLog(event, "InstrumentsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeKeeperUpdatedIterator is returned from FilterKeeperUpdated and is used to iterate over the raw logs and unpacked data for KeeperUpdated events raised by the Exchange contract.
type ExchangeKeeperUpdatedIterator struct {
	Event *ExchangeKeeperUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeKeeperUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeKeeperUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeKeeperUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeKeeperUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeKeeperUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeKeeperUpdated represents a KeeperUpdated event raised by the Exchange contract.
type ExchangeKeeperUpdated struct {
	Keeper  common.Address
	Allowed bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeeperUpdated is a free log retrieval operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Exchange *ExchangeFilterer) FilterKeeperUpdated(opts *bind.FilterOpts, keeper []common.Address, allowed []bool) (*ExchangeKeeperUpdatedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeKeeperUpdatedIterator{contract: _Exchange.contract, event: "KeeperUpdated", logs: logs, sub: sub}, nil
}

// WatchKeeperUpdated is a free log subscription operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Exchange *ExchangeFilterer) WatchKeeperUpdated(opts *bind.WatchOpts, sink chan<- *ExchangeKeeperUpdated, keeper []common.Address, allowed []bool) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var allowedRule []interface{}
	for _, allowedItem := range allowed {
		allowedRule = append(allowedRule, allowedItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "KeeperUpdated", keeperRule, allowedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeKeeperUpdated)
				if err := _Exchange.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeeperUpdated is a log parse operation binding the contract event 0x786c9db967bf0c6b16c7c91adae8a8c554b15a57d373fa2059607300f4616c00.
//
// Solidity: event KeeperUpdated(address indexed keeper, bool indexed allowed)
func (_Exchange *ExchangeFilterer) ParseKeeperUpdated(log types.Log) (*ExchangeKeeperUpdated, error) {
	event := new(ExchangeKeeperUpdated)
	if err := _Exchange.contract.UnpackLog(event, "KeeperUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeLiquidationIterator is returned from FilterLiquidation and is used to iterate over the raw logs and unpacked data for Liquidation events raised by the Exchange contract.
type ExchangeLiquidationIterator struct {
	Event *ExchangeLiquidation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeLiquidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeLiquidation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeLiquidation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeLiquidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeLiquidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeLiquidation represents a Liquidation event raised by the Exchange contract.
type ExchangeLiquidation struct {
	Id             *big.Int
	Instrument     *big.Int
	Account        common.Address
	IsBuy          bool
	Amount         *big.Int
	LiquidateQuote *big.Int
	Fee            *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterLiquidation is a free log retrieval operation binding the contract event 0x5846efdcc386ed436ec4f14203bd6da85657baa54673e7acc4e0f5cc354b16b2.
//
// Solidity: event Liquidation(uint256 indexed id, uint256 indexed instrument, address indexed account, bool isBuy, uint256 amount, uint256 liquidateQuote, uint256 fee)
func (_Exchange *ExchangeFilterer) FilterLiquidation(opts *bind.FilterOpts, id []*big.Int, instrument []*big.Int, account []common.Address) (*ExchangeLiquidationIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "Liquidation", idRule, instrumentRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeLiquidationIterator{contract: _Exchange.contract, event: "Liquidation", logs: logs, sub: sub}, nil
}

// WatchLiquidation is a free log subscription operation binding the contract event 0x5846efdcc386ed436ec4f14203bd6da85657baa54673e7acc4e0f5cc354b16b2.
//
// Solidity: event Liquidation(uint256 indexed id, uint256 indexed instrument, address indexed account, bool isBuy, uint256 amount, uint256 liquidateQuote, uint256 fee)
func (_Exchange *ExchangeFilterer) WatchLiquidation(opts *bind.WatchOpts, sink chan<- *ExchangeLiquidation, id []*big.Int, instrument []*big.Int, account []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var instrumentRule []interface{}
	for _, instrumentItem := range instrument {
		instrumentRule = append(instrumentRule, instrumentItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "Liquidation", idRule, instrumentRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeLiquidation)
				if err := _Exchange.contract.UnpackLog(event, "Liquidation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidation is a log parse operation binding the contract event 0x5846efdcc386ed436ec4f14203bd6da85657baa54673e7acc4e0f5cc354b16b2.
//
// Solidity: event Liquidation(uint256 indexed id, uint256 indexed instrument, address indexed account, bool isBuy, uint256 amount, uint256 liquidateQuote, uint256 fee)
func (_Exchange *ExchangeFilterer) ParseLiquidation(log types.Log) (*ExchangeLiquidation, error) {
	event := new(ExchangeLiquidation)
	if err := _Exchange.contract.UnpackLog(event, "Liquidation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeOwnerUpdatedIterator is returned from FilterOwnerUpdated and is used to iterate over the raw logs and unpacked data for OwnerUpdated events raised by the Exchange contract.
type ExchangeOwnerUpdatedIterator struct {
	Event *ExchangeOwnerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeOwnerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeOwnerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeOwnerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeOwnerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeOwnerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeOwnerUpdated represents a OwnerUpdated event raised by the Exchange contract.
type ExchangeOwnerUpdated struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerUpdated is a free log retrieval operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Exchange *ExchangeFilterer) FilterOwnerUpdated(opts *bind.FilterOpts, newOwner []common.Address) (*ExchangeOwnerUpdatedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeOwnerUpdatedIterator{contract: _Exchange.contract, event: "OwnerUpdated", logs: logs, sub: sub}, nil
}

// WatchOwnerUpdated is a free log subscription operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Exchange *ExchangeFilterer) WatchOwnerUpdated(opts *bind.WatchOpts, sink chan<- *ExchangeOwnerUpdated, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "OwnerUpdated", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeOwnerUpdated)
				if err := _Exchange.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerUpdated is a log parse operation binding the contract event 0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b.
//
// Solidity: event OwnerUpdated(address indexed newOwner)
func (_Exchange *ExchangeFilterer) ParseOwnerUpdated(log types.Log) (*ExchangeOwnerUpdated, error) {
	event := new(ExchangeOwnerUpdated)
	if err := _Exchange.contract.UnpackLog(event, "OwnerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Exchange contract.
type ExchangeUpgradedIterator struct {
	Event *ExchangeUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeUpgraded represents a Upgraded event raised by the Exchange contract.
type ExchangeUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Exchange *ExchangeFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ExchangeUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeUpgradedIterator{contract: _Exchange.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Exchange *ExchangeFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ExchangeUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeUpgraded)
				if err := _Exchange.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Exchange *ExchangeFilterer) ParseUpgraded(log types.Log) (*ExchangeUpgraded, error) {
	event := new(ExchangeUpgraded)
	if err := _Exchange.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeVersionInitializedIterator is returned from FilterVersionInitialized and is used to iterate over the raw logs and unpacked data for VersionInitialized events raised by the Exchange contract.
type ExchangeVersionInitializedIterator struct {
	Event *ExchangeVersionInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeVersionInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeVersionInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeVersionInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeVersionInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeVersionInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeVersionInitialized represents a VersionInitialized event raised by the Exchange contract.
type ExchangeVersionInitialized struct {
	NewVersion *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVersionInitialized is a free log retrieval operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Exchange *ExchangeFilterer) FilterVersionInitialized(opts *bind.FilterOpts, newVersion []*big.Int) (*ExchangeVersionInitializedIterator, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeVersionInitializedIterator{contract: _Exchange.contract, event: "VersionInitialized", logs: logs, sub: sub}, nil
}

// WatchVersionInitialized is a free log subscription operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Exchange *ExchangeFilterer) WatchVersionInitialized(opts *bind.WatchOpts, sink chan<- *ExchangeVersionInitialized, newVersion []*big.Int) (event.Subscription, error) {

	var newVersionRule []interface{}
	for _, newVersionItem := range newVersion {
		newVersionRule = append(newVersionRule, newVersionItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "VersionInitialized", newVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeVersionInitialized)
				if err := _Exchange.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionInitialized is a log parse operation binding the contract event 0x7a621ac638ec0ed2c353a3800daf6854f8682f565af567ad99fc910f4755938d.
//
// Solidity: event VersionInitialized(uint256 indexed newVersion)
func (_Exchange *ExchangeFilterer) ParseVersionInitialized(log types.Log) (*ExchangeVersionInitialized, error) {
	event := new(ExchangeVersionInitialized)
	if err := _Exchange.contract.UnpackLog(event, "VersionInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
